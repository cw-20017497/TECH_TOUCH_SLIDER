cscope 15 D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source"               0000064998
	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm.c

1 
	~"comm.h
"

7 
CommHódî_T
 
	gcomm_hódî
[ 
MAX_COMM_ID
 ];

10 
CommHódî_T
 
	$GëCommHódî
–
U8
 
id
 )

13  
comm_hódî
[ 
id
 ];

14 
	}
}

16 
	$SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 )

19 
comm_hódî
[ 
id
 ] = 
vÆ
;

20 
	}
}

27 
I16
 
	$CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
 , 
I16
 
Àn
 )

29 
U8
 
i
;

32 if–
	`HAL_IsFuŒSídBuf„r
–
id
 ) !
TRUE
 )

34  
i
 = 0 ; i < 
Àn
 ; i++ )

36 
	`HAL_SëSídBuf„r
–
id
, 
£nd_pkt
[ 
i
 ] );

39 
	`HAL_SídByã
–
id
 );

40  
Àn
;

44 
	}
}

50 
I16
 
	$CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 )

53 
U16
 
i
;

54 
I16
 
Àn
;

56 if–
	`HAL_IsEm±yRecvBuf„r
–
id
 ) !
TRUE
 )

58  
i
 = 0; i < 
Àn
 ; i++ )

60 
ªcv_pkt
[ 
i
 ] = 
	`HAL_GëRecvBuf„r
–
id
, i );

63  
Àn
;

68 
U16
 
i
 = 0;

69 
I16
 
Àn
 = 0;

71  
	`HAL_IsEm±yRecvBuf„r
–
id
 ) =
FALSE
 )

73 
ªcv_pkt
[ 
i
++ ] = 
	`HAL_GëRecvBuf„r
–
id
 );

74 
Àn
++;

77  
Àn
;

79 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm.h

1 #i‚de‡
__COMM_H__


2 
	#__COMM_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

7 
	#COMM_ID_KEY
 
UART_ID_0


	)

8 
	#COMM_ID_MAIN
 
UART_ID_1


	)

10 
	#MAX_COMM_ID
 
MAX_UART_ID


	)

12 
U16
 
	tCommHódî_T
;

14 
CommHódî_T
 
GëCommHódî
–
U8
 
id
 );

15 
SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 );

17 
I16
 
CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
, I16 
Àn
 );

18 
I16
 
CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm_queue.c

1 
	~"comm_queue.h
"

2 
	~"queue.h
"

3 
	~"timî.h
"

4 
	~"timî_id.h
"

6 
	~"∑r£r_maö.h
"

8 
	#MAX_QUEUE_NUM
 30

	)

9 
CommD©a_T
 
	gcomm_‰⁄t
[ 
MAX_QUEUE_NUM
 ];

10 
SQueue_T
 
	gcomm_queue
[ 
MAX_COMM_ID
 ];

13 
	#RETRY_REQ_COUNT
 5

	)

14 
	#RETRY_ACK_COUNT
 1

	)

15 
	#RETRY_WAIT_TIME
 80

	)

16 
CommD©a_T
 
	g‰⁄t
;

18 
	$InôCommQueue
()

20 
	`InôQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], &
comm_‰⁄t
, –
CommD©a_T
 ), 
MAX_QUEUE_NUM
 );

21 
	}
}

24 
	$SëCommQueueFr⁄t
(
U8
 
∑ckë
)

26 
CommD©a_T
 
d©a
;

28 
d©a
.
∑ckë
 =Öacket;

30 if–
∑ckë
 =
PKT_REQ_KEY
 )

32 
d©a
.
ªåy_cou¡
 = 
RETRY_REQ_COUNT
;

33 
	`EnQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], &
d©a
);

37 
d©a
.
ªåy_cou¡
 = 
RETRY_ACK_COUNT
;

38 
	`EnQueueFr⁄t
–&
comm_queue
[ 
COMM_ID_MAIN
 ], &
d©a
);

41 
	}
}

44 
U8
 
	gdbg_îr_ªåy_cou¡
 = 0;

45 
	$SídPackëQueueFr⁄t
()

47 if–
	`IsExpúedTimî
–
TIMER_ID_COMM_WAIT_1
 ) !
TIMER_EXPIRE
 )

52 if–
	`IsExpúedTimî
–
TIMER_ID_COMM_FRONT_TX_DONE
 ) !
TIMER_EXPIRE
 )

56 if–
comm_maö
.
ªåy_cou¡
 == 0 )

58 if–
	`DeQueue
–&
comm_queue
[ 
COMM_ID_MAIN
 ], (*)&
comm_maö
 ) =
TRUE
 )

61 
comm_maö
.
ªåy_cou¡
--;

63 
	`SëCommHódî
–
COMM_ID_MAIN
, 
comm_maö
.
∑ckë
);

64 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_TX
, 0 );

69 
dbg_îr_ªåy_cou¡
++;

70 
comm_maö
.
ªåy_cou¡
--;

72 
	`SëCommHódî
–
COMM_ID_MAIN
, 
comm_maö
.
∑ckë
);

73 
	`SèπTimî
–
TIMER_ID_COMM_MAIN_TX
, 0 );

76 
	`SèπTimî
–
TIMER_ID_COMM_WAIT_1
, 
RETRY_WAIT_TIME
 );

77 
	}
}

80 
U8
 
	gdbg_ªåy_ok_cou¡
 = 0;

81 
U8
 
	gdbg_ªåy_ng_cou¡
 = 0;

82 
	$Re˚ivedFr⁄tAck
(
U8
 
∑ckë
)

84 if–
∑ckë
 =
comm_maö
.packet )

86 
comm_maö
.
ªåy_cou¡
 = 0;

87 
dbg_ªåy_ok_cou¡
++;

92 
dbg_ªåy_ng_cou¡
++;

94 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm_queue.h

1 #i‚de‡
__COMM_QUEUE_H__


2 
	#__COMM_QUEUE_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

8 
	s_comm_d©a_


10 
U16
 
	m∑ckë
;

11 
U8
 
	mªåy_cou¡
;

12 } 
	tCommD©a_T
;

14 
InôCommQueue
();

18 
SëCommQueueFr⁄t
(
U8
 
∑ckë
);

20 
SídPackëQueueFr⁄t
( );

22 
Re˚ivedFr⁄tAck
(
U8
 
∑ckë
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\crc16.c

1 
	~"¸c16.h
"

5 
	#MASK
 0xA001

	)

6 
	$CÆCrc16
(
Crc
,
C
)

8 
j
;

9 
CrcSum
;

10 
CrcBuf
;

13 
CrcSum
 = 
Crc
;

14 
CrcBuf
 = 
C
;

16 
j
=0;j < 8;j++) {

17 if(((
CrcSum
 ^ 
CrcBuf
Ë& 0x0001Ë!0ËCrcSum = (CrcSum >> 1Ë^ 
MASK
;

18 
CrcSum
 >>= 1;

20 
CrcBuf
 >>= 1;

23  
CrcSum
;

24 
	}
}

29 c⁄° 
U16
 
	g¸c16èb
[256] =

71 
U16
 
	$¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
)

73 
U16
 
ui_¸c
 = 0xFFFF;

74 
U16
 
ui_ãmp_¸c
;

76 ; 
uc_numbî
 > 0; uc_number--) {

77 
ui_ãmp_¸c
 = 
ui_¸c
 ^ (*
uc_d©a
);

78 
ui_¸c
=(ui_¸c>>8)^
¸c16èb
[
ui_ãmp_¸c
 & 0x00ff];

80 
uc_d©a
++;

82 (
ui_¸c
);

83 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\crc16.h

1 #i‚de‡
__CRC16_H__


2 
	#__CRC16_H__


	)

4 
	~"¥j_ty≥.h
"

7 
CÆCrc16
(
Crc
,
C
);

10 
U16
 
¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser.c

4 
	~"hw.h
"

5 
	~"hÆ_£rül.h
"

6 
	~"∑r£r.h
"

7 
	~"comm.h
"

8 
	~"timî.h
"

10 
	~"∑r£r_maö.h
"

11 
	~"∑r£r_key.h
"

12 
	~"comm_queue.h
"

14 
	#DEBUG_COMM
 1

	)

16 
	#MAX_COMM_RX_BUF_SZ
 255

	)

17 
	#MAX_COMM_TX_BUF_SZ
 255

	)

18 #i‡
DEBUG_COMM


19 
	s_debug_comm_


21 
U32
 
	mrx_˙t
;

22 
U32
 
	mrx_îr
;

24 
U32
 
	mtx_˙t
;

25 } 
	tdebug_comm_t
;

26 
debug_comm_t
 
	gd_comm
[ 
MAX_COMM_ID
 ];

30 vﬁ©ûê
U8
 
	gpkt_ªcv
[ 
MAX_COMM_RX_BUF_SZ
 ];

31 
I16
 
	gpkt_ªcv_Àn
 = 0;

34 vﬁ©ûê
U8
 
	gpkt_£nd
[ 
MAX_COMM_TX_BUF_SZ
 ];

35 
I16
 
	gpkt_£nd_Àn
 = 0;

40 
	$I16
 (*
	t‚_∑r£r_rx_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

41 
	s_∑r£r_li°_


43 
U8
 
TimîId
;

44 
U8
 
CommId
;

45 
‚_∑r£r_rx_t
 
IsVÆidPkt
;

46 
‚_∑r£r_rx_t
 
P¨£rPkt
;

47 } 
	t∑r£r_rx_li°_t
;

49 c⁄° 
∑r£r_rx_li°_t
 
∑r£r_rx_li°
[] =

51 { 
TIMER_ID_COMM_MAIN_RX
, 
COMM_ID_MAIN
, 
IsVÆidPkt_Maö
, 
P¨£rPkt_Maö
 },

52 { 
TIMER_ID_COMM_KEY_RX
, 
COMM_ID_KEY
, 
IsVÆidPkt_Key
, 
P¨£rPkt_Key
 }

53 
	}
};

54 
	#MAX_PARSER_RX_NUM
 ( –
∑r£r_rx_li°
Ë/ –
∑r£r_rx_li°_t
 ) )

	)

55 
U8
 
	gdbg_log_buf
[21][20];

56 
U8
 
	gdbg_ödex
 = 0;

58 
	$RecvPackëH™dÀr
( )

60 
∑r£r_rx_li°_t
 *
p_li°
;

61 
U8
 
i
;

63  
i
 = 0 ; i < 
MAX_PARSER_RX_NUM
 ; i++ )

65 
p_li°
 = &
∑r£r_rx_li°
[ 
i
 ];

66 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

68 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

70 if––
pkt_ªcv_Àn
 = 
	`CommRecvPackë
–
p_li°
->
CommId
, &
pkt_ªcv
[0] ) ) > 0 )

72 
	`HAL_InôRecvLígth
–
p_li°
->
CommId
 );

74 if–
p_li°
->
	`IsVÆidPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 ) =
TRUE
 )

76 
p_li°
->
	`P¨£rPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 );

77 #i‡
DEBUG_COMM


78 
d_comm
[ 
p_li°
->
CommId
 ].
rx_˙t
++;

85 #i‡
DEBUG_COMM


86 
d_comm
[ 
p_li°
->
CommId
 ].
rx_îr
++;

88 
	`mem˝y
–&
dbg_log_buf
[
dbg_ödex
][0], &
pkt_ªcv
[0], 
pkt_ªcv_Àn
 );

89 if–
dbg_ödex
 < 21 )

91 
dbg_ödex
++;

97 
	}
}

103 
	$I16
 (*
	t‚_∑r£r_tx_t
)–
	tCommHódî_T
 *
	tp_comm
, 
	tU8
 *
	tbuf
 );

104 
	$I16
 (*
	t‚_¸c16_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

105 
	s_∑r£r_tx_li°_


107 
U8
 
TimîId
;

108 
U8
 
CommId
;

109 
‚_∑r£r_tx_t
 
make_pkt
;

110 
‚_¸c16_t
 
¸c16
;

112 } 
	t∑r£r_tx_li°_t
;

114 c⁄° 
∑r£r_tx_li°_t
 
∑r£r_tx_li°
[] =

116 { 
TIMER_ID_COMM_MAIN_TX
, 
COMM_ID_MAIN
, 
MakePkt_Maö
, 
Crc16_Maö
 },

117 { 
TIMER_ID_COMM_KEY_TX
, 
COMM_ID_KEY
, 
MakePkt_Key
, 
Crc16_Key
 }

118 
	}
};

119 
	#MAX_PARSER_TX_NUM
 ( –
∑r£r_tx_li°
Ë/ –
∑r£r_tx_li°_t
 ) )

	)

121 
	$SídPackë
( )

123 
∑r£r_tx_li°_t
 *
p_li°
;

124 
U8
 
i
;

125 
CommHódî_T
 
p_comm
;

128  
i
 = 0 ; i < 
MAX_PARSER_TX_NUM
 ; i++ )

130 
p_li°
 = &
∑r£r_tx_li°
[ 
i
 ];

132 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

134 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

136 
p_comm
 = 
	`GëCommHódî
–
p_li°
->
CommId
 );

139 
	`mem£t
–
pkt_£nd
, 0, 
MAX_COMM_TX_BUF_SZ
 );

140 
pkt_£nd_Àn
 = 
p_li°
->
	`make_pkt
–(
CommHódî_T
 *)
p_comm
, 
pkt_£nd
 );

141 if–
pkt_£nd_Àn
 > 0 )

144 
pkt_£nd_Àn
 = 
p_li°
->
	`¸c16
–
pkt_£nd
,Ökt_send_len );

147 
	`CommSídPackë
–
p_li°
->
CommId
, 
pkt_£nd
, 
pkt_£nd_Àn
 );

149 #i‡
DEBUG_COMM


150 
d_comm
[ 
p_li°
->
CommId
 ].
tx_˙t
++;

155 
	`HAL_InôCommId
–
p_li°
->
CommId
 );

159 
	}
}

163 
	$SídPackëH™dÀr
( )

165 
	`SídPackëQueueFr⁄t
();

166 
	`SídPackë
();

167 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser.h

1 #i‚de‡
__PARSER_H__


2 
	#__PARSER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
RecvPackëH™dÀr
( );

7 
SídPackëH™dÀr
( );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_key.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_key.h
"

8 
	~"utû.h
"

9 
	~"timî.h
"

11 
	~"hÆ_Àd.h
"

12 
	~"hÆ_key.h
"

14 
	~"∑r£r_maö.h
"

15 
	~"comm_queue.h
"

31 
	#MIN_PKT_SZ
 5

	)

33 
U16
 
	$Rx_CRC_CCITT
(
U8
 *
puchMsg
, 
U16
 
usD©aLí
)

35 
U8
 
i
 = 0;

36 
U16
 
wCRCö
 = 0x0000;

37 
U16
 
wCPﬁy
 = 0x1021;

38 
U8
 
wCh¨
 = 0;

40 
usD©aLí
--)

42 
wCh¨
 = *(
puchMsg
++);

43 
wCRCö
 ^((
U16
)
wCh¨
 << 8);

44 
i
 = 0; i < 8; i++)

46 i‡(
wCRCö
 & 0x8000)

48 
wCRCö
 = (wCRCö << 1Ë^ 
wCPﬁy
;

52 
wCRCö
 = wCRCin << 1;

57  (
wCRCö
);

58 
	}
}

60 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

62 
U16
 
¸c16
 = 0;

64 
¸c16
 = ( ( (
U16
)
buf
[ 
Àn
 - 3 ] ) << 8 ) & 0xFF00;

65 
¸c16
 |(
U16
)–
buf
[ 
Àn
 - 2 ] );

67 if–
¸c16
 !
	`Rx_CRC_CCITT
–
buf
, (
U16
)–
Àn
 - 3 ) ) )

69  
FALSE
;

72  
TRUE
;

73 
	}
}

75 
I16
 
	$IsVÆidPkt_Key
–
U8
 *
buf
, 
I16
 
Àn
 )

77 if–
buf
 =
NULL
 )

79  
FALSE
;

82 if–
Àn
 < 
MIN_PKT_SZ
 )

84  
FALSE
;

92  
TRUE
;

93 
	}
}

97 
I16
 
P¨£rReqLed
(
U8
 *
buf
);

98 
I16
 
	$P¨£rPkt_Key
–
U8
 *
buf
, 
I16
 
Àn
)

100 
Àn
 = 
	`P¨£rReqLed
(&
buf
[0]);

102  
Àn
;

103 
	}
}

105 
I16
 
	$Crc16_Key
–
U8
 *
buf
, 
I16
 
Àn
 )

107 
U16
 
mu16Chksum
 = 0;

110 if–
Àn
 < 
MIN_PKT_SZ
 )

115 
mu16Chksum
 = 
	`Rx_CRC_CCITT
–
buf
, (
U16
)(
Àn
 - 3));

116 
buf
[ 
Àn
 - 3 ] = 
	`GET_HIGH_BYTE
(
mu16Chksum
);

117 
buf
[ 
Àn
 - 2 ] = 
	`GET_LOW_BYTE
(
mu16Chksum
);

119  
Àn
;

120 
	}
}

125 
U8
 
	gdbg_ªcv_key
[5];

126 
I16
 
	$P¨£rReqLed
(
U8
 *
buf
)

128 
	`HAL_SëKeyVÆ
–
buf
[0] );

129 
	`HAL_SëSlidî
–&
buf
[1] );

134 
	`SëCommQueueFr⁄t
–
PKT_REQ_KEY
 );

137  
TRUE
;

138 
	}
}

145 
I16
 
	$MakePkt_Key
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

147 
I16
 
Àn
 = -1;

149  
Àn
;

150 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_key.h

1 #i‚de‡
__PARSER_KEY_H__


2 
	#__PARSER_KEY_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

8 
I16
 
IsVÆidPkt_Key
–
U8
 *
buf
, I16 
Àn
 );

9 
I16
 
P¨£rPkt_Key
–
U8
 *
buf
, I16 
Àn
);

10 
I16
 
Crc16_Key
–
U8
 *
buf
, I16 
Àn
 );

11 
I16
 
MakePkt_Key
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_main.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_maö.h
"

8 
	~"utû.h
"

9 
	~"timî.h
"

11 
	~"hÆ_Àd.h
"

12 
	~"hÆ_key.h
"

13 
	~"comm_queue.h
"

19 
	#STX
 0xAA

	)

20 
	#ETX
 0x55

	)

22 
	#MIN_PKT_SZ
 5

	)

24 
U16
 
	$Rx_CRC_CCITT
(
U8
 *
puchMsg
, 
U16
 
usD©aLí
)

26 
U8
 
i
 = 0;

27 
U16
 
wCRCö
 = 0x0000;

28 
U16
 
wCPﬁy
 = 0x1021;

29 
U8
 
wCh¨
 = 0;

31 
usD©aLí
--)

33 
wCh¨
 = *(
puchMsg
++);

34 
wCRCö
 ^((
U16
)
wCh¨
 << 8);

35 
i
 = 0; i < 8; i++)

37 i‡(
wCRCö
 & 0x8000)

39 
wCRCö
 = (wCRCö << 1Ë^ 
wCPﬁy
;

43 
wCRCö
 = wCRCin << 1;

48  (
wCRCö
);

49 
	}
}

51 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

53 
U16
 
¸c16
 = 0;

55 
¸c16
 = ( ( (
U16
)
buf
[ 
Àn
 - 3 ] ) << 8 ) & 0xFF00;

56 
¸c16
 |(
U16
)–
buf
[ 
Àn
 - 2 ] );

58 if–
¸c16
 !
	`Rx_CRC_CCITT
–
buf
, (
U16
)–
Àn
 - 3 ) ) )

60  
FALSE
;

63  
TRUE
;

64 
	}
}

66 
U8
 
	gdbg_îr_1
 = 0;

67 
U8
 
	gdbg_îr_2
 = 0;

68 
U8
 
	gdbg_îr_3
 = 0;

69 
I16
 
	$IsVÆidPkt_Maö
–
U8
 *
buf
, 
I16
 
Àn
 )

71 if–
buf
 =
NULL
 )

73 
dbg_îr_1
++;

74  
FALSE
;

77 if–
Àn
 < 
MIN_PKT_SZ
 )

79 
dbg_îr_2
++;

80  
FALSE
;

83 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

85 
dbg_îr_3
++;

86  
FALSE
;

89  
TRUE
;

90 
	}
}

93 
I16
 
P¨£rReqLed
(
U8
 *
buf
);

94 
I16
 
P¨£rAckKey
(
U8
 *
buf
);

96 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

97 
	s_∑r£r_li°_t


99 
U8
 
Ty≥
;

100 
a˘i⁄_t
 
P¨£r
;

101 } 
	t∑r£r_li°_t
;

102 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

104 { 
PKT_REQ_LED
, 
P¨£rReqLed
 },

105 { 
PKT_ACK_KEY
, 
P¨£rAckKey
 },

106 
	}
};

108 
	#SZ_PS_TABLE
 ( –
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

110 
I16
 
	$P¨£rPkt_Maö
–
U8
 *
buf
, 
I16
 
Àn
)

112 
U8
 
mu8Ty≥
;

113 
a˘i⁄_t
 
pP¨£r
;

114 
U8
 
i
;

117  
i
 = 0; i < 
SZ_PS_TABLE
; i++ )

119 
mu8Ty≥
 = 
∑r£r_li°
[ 
i
 ].
Ty≥
;

120 
pP¨£r
 = 
∑r£r_li°
[ 
i
 ].
P¨£r
;

122 if–
mu8Ty≥
 =
buf
[1] )

124 if–
pP¨£r
 !
NULL
 )

126 
Àn
 = 
	`pP¨£r
–&
buf
[2] );

132  
Àn
;

133 
	}
}

135 
I16
 
	$Crc16_Maö
–
U8
 *
buf
, 
I16
 
Àn
 )

137 
U16
 
mu16Chksum
 = 0;

140 if–
Àn
 < 
MIN_PKT_SZ
 )

145 
mu16Chksum
 = 
	`Rx_CRC_CCITT
–
buf
, (
U16
)(
Àn
 - 3));

146 
buf
[ 
Àn
 - 3 ] = 
	`GET_HIGH_BYTE
(
mu16Chksum
);

147 
buf
[ 
Àn
 - 2 ] = 
	`GET_LOW_BYTE
(
mu16Chksum
);

149  
Àn
;

150 
	}
}

159 
I16
 
	$P¨£rReqLed
(
U8
 *
buf
)

161 
U32
 
mu32VÆ
;

165 
	`HAL_SëOnOffLED
–&
buf
[0], 
MAX_LED
 );

168 #i‡
CONFIG_DIMMING


169 
	`HAL_SëDimmögLED
–&
buf
[6], 
MAX_LED
 );

170 
	`HAL_SëDimmögDuty
–
buf
[12] );

171 
	`HAL_SëOnOffDuty
–
buf
[13] );

173 
	`HAL_SëDimmögLED
( 0UL );

182 
	`SëCommQueueFr⁄t
–
PKT_ACK_LED
 );

183  
TRUE
;

184 
	}
}

186 
I16
 
	$P¨£rAckKey
(
U8
 *
buf
)

188 
	`Re˚ivedFr⁄tAck
–
PKT_REQ_KEY
 );

190  
TRUE
;

191 
	}
}

196 
	s_make_li°_t


198 
U8
 
	mTy≥
;

199 
a˘i⁄_t
 
	mMakePkt
;

200 } 
	tmake_li°_t
;

202 
I16
 
MakePktAckLed
–
U8
 *
buf
 );

203 
I16
 
MakePktReqKey
–
U8
 *
buf
 );

204 c⁄° 
make_li°_t
 
	gmake_li°
[] =

206 { 
PKT_ACK_LED
, 
MakePktAckLed
 },

207 { 
PKT_REQ_KEY
, 
MakePktReqKey
 },

209 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

211 
I16
 
	$MakePkt_Maö
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

213 
U8
 
mu8Ty≥
;

214 
a˘i⁄_t
 
p_make_pkt
;

215 
U8
 
i
;

216 
I16
 
Àn
 = -1;

219  
i
 = 0; i < 
SZ_TABLE
; i++ )

221 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

222 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

224 if–
mu8Ty≥
 =(
U8
)
p_comm
 )

226 if–
p_make_pkt
 !
NULL
 )

228 
Àn
 = 
	`p_make_pkt
–
buf
 );

234  
Àn
;

235 
	}
}

241 
I16
 
	$MakePktReqKey
–
U8
 *
buf
 )

243 
I16
 
mi16Lí
 = 0;

244 
U16
 
mu16VÆ
 = 0;

245 
U32
 
mu32VÆ
 = 0;

246 
U8
 
¶idî
[4];

250 
buf
[ 
mi16Lí
++ ] = 
STX
;

253 
buf
[ 
mi16Lí
++ ] = 
PKT_REQ_KEY
;

256 
mu32VÆ
 = 
	`HAL_GëKeyVÆ
();

257 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_32
–
mu32VÆ
 );

258 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_24
–
mu32VÆ
 );

259 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_16
–
mu32VÆ
 );

260 
buf
[ 
mi16Lí
++ ] = 
	`GET_32_BYTE_8
–
mu32VÆ
 );

262 
	`HAL_GëSlidî
–&
¶idî
[0] );

263 
buf
[ 
mi16Lí
++ ] = 
¶idî
[0];

264 
buf
[ 
mi16Lí
++ ] = 
¶idî
[1];

265 
buf
[ 
mi16Lí
++ ] = 
¶idî
[2];

266 
buf
[ 
mi16Lí
++ ] = 
¶idî
[3];

269 
buf
[ 
mi16Lí
++ ] = 0;

272 
buf
[ 
mi16Lí
++ ] = 0;

273 
buf
[ 
mi16Lí
++ ] = 0;

275 
buf
[ 
mi16Lí
++ ] = 0;

276 
buf
[ 
mi16Lí
++ ] = 0;

278 
buf
[ 
mi16Lí
++ ] = 0;

279 
buf
[ 
mi16Lí
++ ] = 0;

281 
buf
[ 
mi16Lí
++ ] = 0;

282 
buf
[ 
mi16Lí
++ ] = 0;

285 
buf
[ 
mi16Lí
++ ] = 0;

286 
buf
[ 
mi16Lí
++ ] = 0;

288 
buf
[ 
mi16Lí
++ ] = 
ETX
;

289  
mi16Lí
;

290 
	}
}

292 
I16
 
	$MakePktAckLed
–
U8
 *
buf
 )

294 
I16
 
mi16Lí
 = 0;

298 
buf
[ 
mi16Lí
++ ] = 
STX
;

301 
buf
[ 
mi16Lí
++ ] = 
PKT_ACK_LED
;

305 
buf
[ 
mi16Lí
++ ] = 0;

306 
buf
[ 
mi16Lí
++ ] = 0;

308 
buf
[ 
mi16Lí
++ ] = 
ETX
;

309  
mi16Lí
;

310 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_main.h

1 #i‚de‡
__PARSER_MAIN_H__


2 
	#__PARSER_MAIN_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

7 
	#PKT_ACK
 0x80

	)

9 
	#PKT_REQ_LED
 0x01

	)

10 
	#PKT_ACK_LED
 (0x80|
PKT_REQ_LED
)

	)

12 
	#PKT_REQ_KEY
 0x10

	)

13 
	#PKT_ACK_KEY
 (0x80|
PKT_REQ_KEY
)

	)

15 
I16
 
IsVÆidPkt_Maö
–
U8
 *
buf
, I16 
Àn
 );

16 
I16
 
P¨£rPkt_Maö
–
U8
 *
buf
, I16 
Àn
);

17 
I16
 
Crc16_Maö
–
U8
 *
buf
, I16 
Àn
 );

18 
I16
 
MakePkt_Maö
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

5 
	#CONFIG_DIMMING
 1

	)

7 
	#CONFIG_VOICE_NUVOTON
 1

8 

	)

9 
	#CONFIG_FOTA_LIB
 0

	)

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_key.c

1 
	~"hw.h
"

2 
	~"hÆ_key.h
"

5 
U32
 
	ggu32Key
 = 0UL;

7 
U32
 
	$HAL_GëKeyVÆ
()

9  
gu32Key
;

10 
	}
}

12 
	$HAL_SëKeyVÆ
(
U32
 
key
)

14 
gu32Key
 = 
key
;

15 
	}
}

19 
U8
 
	g¶idî
[4] = { 0, 0, 0, 0};

20 
	$HAL_GëSlidî
(
U8
 *
pBuf
)

22 
pBuf
[0] = 
¶idî
[0];

23 
pBuf
[1] = 
¶idî
[1];

24 
pBuf
[2] = 
¶idî
[2];

25 
pBuf
[3] = 
¶idî
[3];

26 
	}
}

29 
	$HAL_SëSlidî
(
U8
 *
pBuf
)

31 
¶idî
[0] = 
pBuf
[0];

32 
¶idî
[1] = 
pBuf
[1];

33 
¶idî
[2] = 
pBuf
[2];

34 
¶idî
[3] = 
pBuf
[3];

35 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_key.h

1 #i‚de‡
__HAL_KEY_H__


2 
	#__HAL_KEY_H__


	)

4 
	#HAL_KEY_NONE
 0x00000000UL

	)

7 
	#HAL_KEY_1
 0x00000001UL

8 
	#HAL_KEY_2
 0x00000002UL

9 
	#HAL_KEY_3
 0x00000004UL

10 
	#HAL_KEY_4
 0x00000008UL

11 
	#HAL_KEY_5
 0x00000010UL

12 

	)

14 
	#HAL_KEY_11
 0x00000020UL

15 
	#HAL_KEY_12
 0x00000040UL

16 
	#HAL_KEY_13
 0x00000080UL

17 
	#HAL_KEY_14
 0x00000100UL

18 
	#HAL_KEY_15
 0x00000200UL

19 

	)

21 
	#HAL_KEY_21
 0x00000400UL

	)

22 
	#HAL_KEY_22
 0x00000800UL

	)

23 
	#HAL_KEY_23
 0x00001000UL

	)

24 
	#HAL_KEY_24
 0x00002000UL

	)

25 
	#HAL_KEY_25
 0x00004000UL

	)

27 
	#HAL_KEY_ALL
 0x00007FFFUL

	)

30 
U32
 
HAL_GëKeyVÆ
();

32 
HAL_SëKeyVÆ
(
U32
 
key
);

35 
HAL_GëSlidî
(
U8
 *
pBuf
);

36 
HAL_SëSlidî
(
U8
 *
pBuf
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led.c

1 #¥agm®
öãºu±
 
INTTM01
 
r_èu0_ch™√l1_öãºu±


3 
	~"hw.h
"

4 
	~"hÆ_Àd.h
"

5 
	~"hÆ_Àd_⁄off.h
"

8 
	#MAX_TICK
 10UL

9 
U16
 
u16Cy˛e
 = 
MAX_TICK
;

	)

10 
U16
 
	gGroupB_DimmögTick
 = 
MAX_TICK
;

11 
U16
 
	gGroupB_OnOffTick
 = 
MAX_TICK
;

13 
	s_Àds_


15 
U8
 
	mLeds
[ 
MAX_LED
 ];

16 
U8
 
	mDuty
;

18 
U16
 
	mC⁄fTick
;

19 
U16
 
	mTick
;

20 } 
	tLed_T
;

22 
Led_T
 
	gOnOff
;

23 
Led_T
 
	gDimmög
;

28 
U8
 
	$IsSëBô
(
U8
 *
pBuf
, U8 
mu8VÆ
)

30 
U8
 
mu8Byã
;

31 
U8
 
mu8Bô
;

32 
U8
 
mu8OnOff
;

34 
mu8Byã
 = 
mu8VÆ
 / 8;

35 
mu8Bô
 = 
mu8VÆ
 % 8;

36 
mu8OnOff
 = (
U8
)(
pBuf
[ 
mu8Byã
 ] & (1U<<
mu8Bô
));

37 if–
mu8OnOff
 != 0 )

39  
ON
;

42  
OFF
;

43 
	}
}

46 
U16
 
	$CÆcDuty2Tick
–
U8
 
mu8Duty
 )

48 
U16
 
mu16Tick
 = 0;

50 if–
mu8Duty
 > 100 )

52 
mu8Duty
 = 100;

54 if–
mu8Duty
 < 1 )

56 
mu8Duty
 = 1;

59 
mu16Tick
 = (
U16
)((
MAX_TICK
 * (U16)
mu8Duty
) / 100UL);

61  
mu16Tick
;

62 
	}
}

64 
	$HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
)

66 
U8
 
mu8Byã
;

67 
U8
 
mu8Bô
;

69 
mu8Byã
 = 
Àd
 / 8;

70 
mu8Bô
 = 
Àd
 % 8;

71 if–
mu8OnOff
 =
ON
 )

73 
OnOff
.
Leds
[ 
mu8Byã
 ] |((
U8
)1U<<
mu8Bô
);

77 
OnOff
.
Leds
[ 
mu8Byã
 ] &~((
U8
)1U<<
mu8Bô
);

80 
	}
}

82 
	$HAL_SëOnOffLED
(
U8
 *
pLeds
, U8 
mu8Size
 )

84 
	`mem˝y
–&
OnOff
.
Leds
[0], 
pLeds
, 
mu8Size
 );

85 
	}
}

88 
	$HAL_SëOnOffDuty
(
U8
 
mu8Duty
)

90 
OnOff
.
Duty
 = 
mu8Duty
;

91 
OnOff
.
C⁄fTick
 = 
	`CÆcDuty2Tick
–
mu8Duty
 );

92 
	}
}

95 
	$HAL_SëDimmögLED
(
U8
 *
pLeds
, U8 
mu8Size
)

97 
	`mem˝y
–&
Dimmög
.
Leds
[0], 
pLeds
, 
mu8Size
 );

98 
	}
}

101 
	$HAL_SëDimmögDuty
(
U8
 
mu8Duty
)

103 
Dimmög
.
Duty
 = 
mu8Duty
;

104 
Dimmög
.
C⁄fTick
 = 
	`CÆcDuty2Tick
–
mu8Duty
 );

105 
	}
}

109 (*
	tA˘i⁄_T
)(
	tU8
 
	tmu8OnOff
);

110 
	s_⁄off_Àd_


112 
U8
 
Led
;

113 
A˘i⁄_T
 
pfOnOff
;

114 } 
	tOnOff_T
;

119 
OnOff_T
 
Group_A_Li°
[] =

121 { 0, 
HAL_OnOffLed_11
 },

122 { 1, 
HAL_OnOffLed_12
 },

123 { 2, 
HAL_OnOffLed_13
 },

124 { 3, 
HAL_OnOffLed_14
 },

125 { 4, 
HAL_OnOffLed_15
 },

126 { 5, 
HAL_OnOffLed_16
 },

127 { 6, 
HAL_OnOffLed_17
 },

129 { 7, 
HAL_OnOffLed_21
 },

130 { 8, 
HAL_OnOffLed_22
 },

131 { 9, 
HAL_OnOffLed_23
 },

132 { 10, 
HAL_OnOffLed_24
 },

133 { 11, 
HAL_OnOffLed_25
 },

134 { 12, 
HAL_OnOffLed_26
 },

135 { 13, 
HAL_OnOffLed_27
 },

137 { 14, 
HAL_OnOffLed_31
 },

138 { 15, 
HAL_OnOffLed_32
 },

139 { 16, 
HAL_OnOffLed_33
 },

140 { 17, 
HAL_OnOffLed_34
 },

141 { 18, 
HAL_OnOffLed_35
 },

142 { 19, 
HAL_OnOffLed_36
 },

143 { 20, 
HAL_OnOffLed_37
 },

145 { 21, 
HAL_OnOffLed_41
 },

146 { 22, 
HAL_OnOffLed_42
 },

147 { 23, 
HAL_OnOffLed_43
 },

148 { 24, 
HAL_OnOffLed_44
 },

149 { 25, 
HAL_OnOffLed_45
 },

150 { 26, 
HAL_OnOffLed_46
 },

151 { 27, 
HAL_OnOffLed_47
 },

153 { 28, 
HAL_OnOffLed_51
 },

154 { 29, 
HAL_OnOffLed_52
 },

155 { 30, 
HAL_OnOffLed_53
 },

156 { 31, 
HAL_OnOffLed_54
 },

157 { 32, 
HAL_OnOffLed_55
 },

158 { 33, 
HAL_OnOffLed_56
 },

159 { 34, 
HAL_OnOffLed_57
 }

160 
	}
};

161 
	#SZ_GROUP_A_LIST
 ((
Group_A_Li°
)/(
OnOff_T
))

	)

166 
	$OnOffLed
(
OnOff_T
 *
pLi°
, 
U8
 
mu8Li°Size
, U8 *
pOnOff
, U8 *
pDimmög
, U8 
mu8OnOff
)

168 
U8
 
i
;

169 
U8
 
mu8Led
;

170 
A˘i⁄_T
 
pfOnOff
;

172  
i
 = 0 ; i < 
mu8Li°Size
; i++ )

174 
mu8Led
 = 
pLi°
[ 
i
 ].
Led
;

176 if–
	`IsSëBô
(
pOnOff
, 
mu8Led
 ) =
ON
 )

179 
pfOnOff
 = 
pLi°
[ 
i
 ].pfOnOff;

180 if–
pfOnOff
 !
NULL
 )

182 
	`pfOnOff
–
mu8OnOff
 );

186 
	}
}

189 
	$OnOffDimmög
(
OnOff_T
 *
pLi°
, 
U8
 
mu8Li°Size
, U8 *
pOnOff
, U8 *
pDimmög
, U8 
mu8OnOff
)

191 
U8
 
i
;

192 
U8
 
mu8Led
;

193 
A˘i⁄_T
 
pfOnOff
;

195  
i
 = 0 ; i < 
mu8Li°Size
; i++ )

197 
mu8Led
 = 
pLi°
[ 
i
 ].
Led
;

200 if–
	`IsSëBô
(
pOnOff
, 
mu8Led
 ) =
OFF
 )

202 
pfOnOff
 = 
pLi°
[ 
i
 ].pfOnOff;

204 if–
pfOnOff
 !
NULL
 )

207 if–
	`IsSëBô
(
pDimmög
, 
mu8Led
 ) =
ON
 )

210 
	`pfOnOff
–
mu8OnOff
 );

211 if–
mu8OnOff
 =
ON
 )

213 
	`pfOnOff
–
ON
 );

217 
	`pfOnOff
–
OFF
 );

222 
	`pfOnOff
–
OFF
 );

227 
	}
}

237 
	$C⁄åﬁLed
()

239 if–
u16Cy˛e
 == 0 )

241 
u16Cy˛e
 = 
MAX_TICK
;

244 
Dimmög
.
Tick
 = Dimmög.
C⁄fTick
;

245 
OnOff
.
Tick
 = OnOff.
C⁄fTick
;

248 if–
u16Cy˛e
 != 0 )

250 --
u16Cy˛e
;

259 if–
Dimmög
.
Tick
 != 0 )

262 
Dimmög
.
Tick
--;

263 
	`OnOffDimmög
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
ON
 );

268 
	`OnOffDimmög
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
OFF
 );

272 if–
OnOff
.
Tick
 != 0 )

275 
OnOff
.
Tick
--;

276 
	`OnOffLed
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
ON
 );

281 
	`OnOffLed
–
Group_A_Li°
, 
SZ_GROUP_A_LIST
, &
OnOff
.
Leds
[0], &
Dimmög
.Leds[0], 
OFF
 );

283 
	}
}

288 
__öãºu±
 
	$r_èu0_ch™√l1_öãºu±
()

290 
	`EI
();

291 
	`C⁄åﬁLed
();

292 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led.h

1 #i‚de‡
__HAL_LED_H__


2 
	#__HAL_LED_H__


	)

8 
	mSEG_1_A
,

9 
	mSEG_1_G
,

10 
	mSEG_1_F
,

11 
	mSEG_1_E
,

12 
	mSEG_1_D
,

13 
	mSEG_1_B
,

14 
	mSEG_1_C
,

16 
	mSEG_2_A
,

17 
	mSEG_2_G
,

18 
	mSEG_2_F
,

19 
	mSEG_2_E
,

20 
	mSEG_2_D
,

21 
	mSEG_2_B
,

22 
	mSEG_2_C
,

24 
	mSEG_3_A
,

25 
	mSEG_3_G
,

26 
	mSEG_3_F
,

27 
	mSEG_3_E
,

28 
	mSEG_3_D
,

29 
	mSEG_3_B
,

30 
	mSEG_3_C
,

32 
	mSEG_22
,

33 
	mSEG_23
,

34 
	mSEG_24
,

35 
	mSEG_25
,

36 
	mSEG_26
,

37 
	mSEG_27
,

38 
	mSEG_28
,

39 
	mSEG_29
,

40 
	mSEG_30
,

41 
	mSEG_31
,

42 
	mSEG_32
,

43 
	mSEG_33
,

44 
	mSEG_34
,

45 
	mSEG_35
,

47 
	mLED_ALL
,

49 
	mMAX_LED_NUM


50 } 
	tLedId_T
;

51 
	#MAX_LED
 6

	)

53 
HAL_Tu∫OnOffLED
(
LedId_T
 
Àd
, 
U8
 
mu8OnOff
);

55 
HAL_SëOnOffLED
(
U8
 *
pLeds
, U8 
mu8Size
 );

56 
HAL_SëOnOffDuty
(
U8
 
mu8Duty
);

58 
HAL_SëDimmögLED
(
U8
 *
pLeds
, U8 
mu8Size
);

59 
HAL_SëDimmögDuty
(
U8
 
mu8Duty
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led_onoff.c

1 
	~"hw.h
"

2 
	~"hÆ_Àd_⁄off.h
"

5 
	$HAL_OnOffLed_11
(
U8
 
mu8OnOff
)

7 
P_LED_11
 = 
mu8OnOff
;

8 
	}
}

10 
	$HAL_OnOffLed_12
(
U8
 
mu8OnOff
)

12 
P_LED_12
 = 
mu8OnOff
;

13 
	}
}

15 
	$HAL_OnOffLed_13
(
U8
 
mu8OnOff
)

17 
P_LED_13
 = 
mu8OnOff
;

18 
	}
}

20 
	$HAL_OnOffLed_14
(
U8
 
mu8OnOff
)

22 
P_LED_14
 = 
mu8OnOff
;

23 
	}
}

25 
	$HAL_OnOffLed_15
(
U8
 
mu8OnOff
)

27 
P_LED_15
 = 
mu8OnOff
;

28 
	}
}

30 
	$HAL_OnOffLed_16
(
U8
 
mu8OnOff
)

32 
P_LED_16
 = 
mu8OnOff
;

33 
	}
}

35 
	$HAL_OnOffLed_17
(
U8
 
mu8OnOff
)

37 
P_LED_17
 = 
mu8OnOff
;

38 
	}
}

42 
	$HAL_OnOffLed_21
(
U8
 
mu8OnOff
)

44 
P_LED_21
 = 
mu8OnOff
;

45 
	}
}

47 
	$HAL_OnOffLed_22
(
U8
 
mu8OnOff
)

49 
P_LED_22
 = 
mu8OnOff
;

50 
	}
}

52 
	$HAL_OnOffLed_23
(
U8
 
mu8OnOff
)

54 
P_LED_23
 = 
mu8OnOff
;

55 
	}
}

57 
	$HAL_OnOffLed_24
(
U8
 
mu8OnOff
)

59 
P_LED_24
 = 
mu8OnOff
;

60 
	}
}

62 
	$HAL_OnOffLed_25
(
U8
 
mu8OnOff
)

64 
P_LED_25
 = 
mu8OnOff
;

65 
	}
}

67 
	$HAL_OnOffLed_26
(
U8
 
mu8OnOff
)

69 
P_LED_26
 = 
mu8OnOff
;

70 
	}
}

72 
	$HAL_OnOffLed_27
(
U8
 
mu8OnOff
)

74 
P_LED_27
 = 
mu8OnOff
;

75 
	}
}

79 
	$HAL_OnOffLed_31
(
U8
 
mu8OnOff
)

81 
P_LED_31
 = 
mu8OnOff
;

82 
	}
}

84 
	$HAL_OnOffLed_32
(
U8
 
mu8OnOff
)

86 
P_LED_32
 = 
mu8OnOff
;

87 
	}
}

89 
	$HAL_OnOffLed_33
(
U8
 
mu8OnOff
)

91 
P_LED_33
 = 
mu8OnOff
;

92 
	}
}

94 
	$HAL_OnOffLed_34
(
U8
 
mu8OnOff
)

96 
P_LED_34
 = 
mu8OnOff
;

97 
	}
}

99 
	$HAL_OnOffLed_35
(
U8
 
mu8OnOff
)

101 
P_LED_35
 = 
mu8OnOff
;

102 
	}
}

104 
	$HAL_OnOffLed_36
(
U8
 
mu8OnOff
)

106 
P_LED_36
 = 
mu8OnOff
;

107 
	}
}

109 
	$HAL_OnOffLed_37
(
U8
 
mu8OnOff
)

111 
P_LED_37
 = 
mu8OnOff
;

112 
	}
}

116 
	$HAL_OnOffLed_41
(
U8
 
mu8OnOff
)

118 
P_LED_41
 = 
mu8OnOff
;

119 
	}
}

121 
	$HAL_OnOffLed_42
(
U8
 
mu8OnOff
)

123 
P_LED_42
 = 
mu8OnOff
;

124 
	}
}

126 
	$HAL_OnOffLed_43
(
U8
 
mu8OnOff
)

128 
P_LED_43
 = 
mu8OnOff
;

129 
	}
}

131 
	$HAL_OnOffLed_44
(
U8
 
mu8OnOff
)

133 
P_LED_44
 = 
mu8OnOff
;

134 
	}
}

136 
	$HAL_OnOffLed_45
(
U8
 
mu8OnOff
)

138 
P_LED_45
 = 
mu8OnOff
;

139 
	}
}

141 
	$HAL_OnOffLed_46
(
U8
 
mu8OnOff
)

143 
P_LED_46
 = 
mu8OnOff
;

144 
	}
}

146 
	$HAL_OnOffLed_47
(
U8
 
mu8OnOff
)

148 
P_LED_47
 = 
mu8OnOff
;

149 
	}
}

153 
	$HAL_OnOffLed_51
(
U8
 
mu8OnOff
)

155 
P_LED_51
 = 
mu8OnOff
;

156 
	}
}

158 
	$HAL_OnOffLed_52
(
U8
 
mu8OnOff
)

160 
P_LED_52
 = 
mu8OnOff
;

161 
	}
}

163 
	$HAL_OnOffLed_53
(
U8
 
mu8OnOff
)

165 
P_LED_53
 = 
mu8OnOff
;

166 
	}
}

168 
	$HAL_OnOffLed_54
(
U8
 
mu8OnOff
)

170 
P_LED_54
 = 
mu8OnOff
;

171 
	}
}

173 
	$HAL_OnOffLed_55
(
U8
 
mu8OnOff
)

175 
P_LED_55
 = 
mu8OnOff
;

176 
	}
}

178 
	$HAL_OnOffLed_56
(
U8
 
mu8OnOff
)

180 
P_LED_56
 = 
mu8OnOff
;

181 
	}
}

183 
	$HAL_OnOffLed_57
(
U8
 
mu8OnOff
)

185 
P_LED_57
 = 
mu8OnOff
;

186 
	}
}

190 
	$HAL_OnOffLed_61
(
U8
 
mu8OnOff
)

192 
P_LED_61
 = 
mu8OnOff
;

193 
	}
}

195 
	$HAL_OnOffLed_62
(
U8
 
mu8OnOff
)

197 
P_LED_62
 = 
mu8OnOff
;

198 
	}
}

200 
	$HAL_OnOffLed_63
(
U8
 
mu8OnOff
)

202 
P_LED_63
 = 
mu8OnOff
;

203 
	}
}

205 
	$HAL_OnOffLed_64
(
U8
 
mu8OnOff
)

207 
P_LED_64
 = 
mu8OnOff
;

208 
	}
}

210 
	$HAL_OnOffLed_65
(
U8
 
mu8OnOff
)

212 
P_LED_65
 = 
mu8OnOff
;

213 
	}
}

215 
	$HAL_OnOffLed_66
(
U8
 
mu8OnOff
)

217 
P_LED_66
 = 
mu8OnOff
;

218 
	}
}

220 
	$HAL_OnOffLed_67
(
U8
 
mu8OnOff
)

222 
P_LED_67
 = 
mu8OnOff
;

223 
	}
}

227 
	$HAL_OnOffLed_71
(
U8
 
mu8OnOff
)

229 
P_LED_71
 = 
mu8OnOff
;

230 
	}
}

232 
	$HAL_OnOffLed_72
(
U8
 
mu8OnOff
)

234 
P_LED_72
 = 
mu8OnOff
;

235 
	}
}

237 
	$HAL_OnOffLed_73
(
U8
 
mu8OnOff
)

239 
P_LED_73
 = 
mu8OnOff
;

240 
	}
}

242 
	$HAL_OnOffLed_74
(
U8
 
mu8OnOff
)

244 
P_LED_74
 = 
mu8OnOff
;

245 
	}
}

247 
	$HAL_OnOffLed_75
(
U8
 
mu8OnOff
)

249 
P_LED_75
 = 
mu8OnOff
;

250 
	}
}

252 
	$HAL_OnOffLed_76
(
U8
 
mu8OnOff
)

254 
P_LED_76
 = 
mu8OnOff
;

255 
	}
}

257 
	$HAL_OnOffLed_77
(
U8
 
mu8OnOff
)

259 
P_LED_77
 = 
mu8OnOff
;

260 
	}
}

264 
	$HAL_OnOffLed_81
(
U8
 
mu8OnOff
)

266 
P_LED_81
 = 
mu8OnOff
;

267 
	}
}

269 
	$HAL_OnOffLed_82
(
U8
 
mu8OnOff
)

271 
P_LED_82
 = 
mu8OnOff
;

272 
	}
}

274 
	$HAL_OnOffLed_83
(
U8
 
mu8OnOff
)

276 
P_LED_83
 = 
mu8OnOff
;

277 
	}
}

279 
	$HAL_OnOffLed_84
(
U8
 
mu8OnOff
)

281 
P_LED_84
 = 
mu8OnOff
;

282 
	}
}

284 
	$HAL_OnOffLed_85
(
U8
 
mu8OnOff
)

286 
P_LED_85
 = 
mu8OnOff
;

287 
	}
}

289 
	$HAL_OnOffLed_86
(
U8
 
mu8OnOff
)

291 
P_LED_86
 = 
mu8OnOff
;

292 
	}
}

294 
	$HAL_OnOffLed_87
(
U8
 
mu8OnOff
)

296 
P_LED_87
 = 
mu8OnOff
;

297 
	}
}

301 
	$HAL_OnOffLed_91
(
U8
 
mu8OnOff
)

303 
P_LED_91
 = 
mu8OnOff
;

304 
	}
}

306 
	$HAL_OnOffLed_92
(
U8
 
mu8OnOff
)

308 
P_LED_92
 = 
mu8OnOff
;

309 
	}
}

311 
	$HAL_OnOffLed_93
(
U8
 
mu8OnOff
)

313 
P_LED_93
 = 
mu8OnOff
;

314 
	}
}

316 
	$HAL_OnOffLed_94
(
U8
 
mu8OnOff
)

318 
P_LED_94
 = 
mu8OnOff
;

319 
	}
}

321 
	$HAL_OnOffLed_95
(
U8
 
mu8OnOff
)

323 
P_LED_95
 = 
mu8OnOff
;

324 
	}
}

326 
	$HAL_OnOffLed_96
(
U8
 
mu8OnOff
)

328 
P_LED_96
 = 
mu8OnOff
;

329 
	}
}

331 
	$HAL_OnOffLed_97
(
U8
 
mu8OnOff
)

333 
P_LED_97
 = 
mu8OnOff
;

334 
	}
}

338 
	$HAL_OnOffLed_101
(
U8
 
mu8OnOff
)

340 
P_LED_101
 = 
mu8OnOff
;

341 
	}
}

343 
	$HAL_OnOffLed_102
(
U8
 
mu8OnOff
)

345 
P_LED_102
 = 
mu8OnOff
;

346 
	}
}

348 
	$HAL_OnOffLed_103
(
U8
 
mu8OnOff
)

350 
P_LED_103
 = 
mu8OnOff
;

351 
	}
}

353 
	$HAL_OnOffLed_104
(
U8
 
mu8OnOff
)

355 
P_LED_104
 = 
mu8OnOff
;

356 
	}
}

358 
	$HAL_OnOffLed_105
(
U8
 
mu8OnOff
)

360 
P_LED_105
 = 
mu8OnOff
;

361 
	}
}

363 
	$HAL_OnOffLed_106
(
U8
 
mu8OnOff
)

365 
P_LED_106
 = 
mu8OnOff
;

366 
	}
}

368 
	$HAL_OnOffLed_107
(
U8
 
mu8OnOff
)

370 
P_LED_107
 = 
mu8OnOff
;

371 
	}
}

375 
	$HAL_OnOffLed_111
(
U8
 
mu8OnOff
)

377 
P_LED_111
 = 
mu8OnOff
;

378 
	}
}

380 
	$HAL_OnOffLed_112
(
U8
 
mu8OnOff
)

382 
P_LED_112
 = 
mu8OnOff
;

383 
	}
}

385 
	$HAL_OnOffLed_113
(
U8
 
mu8OnOff
)

387 
P_LED_113
 = 
mu8OnOff
;

388 
	}
}

390 
	$HAL_OnOffLed_114
(
U8
 
mu8OnOff
)

392 
P_LED_114
 = 
mu8OnOff
;

393 
	}
}

395 
	$HAL_OnOffLed_115
(
U8
 
mu8OnOff
)

397 
P_LED_115
 = 
mu8OnOff
;

398 
	}
}

400 
	$HAL_OnOffLed_116
(
U8
 
mu8OnOff
)

402 
P_LED_116
 = 
mu8OnOff
;

403 
	}
}

405 
	$HAL_OnOffLed_117
(
U8
 
mu8OnOff
)

407 
P_LED_117
 = 
mu8OnOff
;

408 
	}
}

412 
	$HAL_OnOffLed_121
(
U8
 
mu8OnOff
)

414 
P_LED_121
 = !
mu8OnOff
;

415 
	}
}

417 
	$HAL_OnOffLed_122
(
U8
 
mu8OnOff
)

419 
P_LED_122
 = !
mu8OnOff
;

420 
	}
}

422 
	$HAL_OnOffLed_123
(
U8
 
mu8OnOff
)

425 
	}
}

427 
	$HAL_OnOffLed_124
(
U8
 
mu8OnOff
)

430 
	}
}

432 
	$HAL_OnOffLed_125
(
U8
 
mu8OnOff
)

435 
	}
}

437 
	$HAL_OnOffLed_126
(
U8
 
mu8OnOff
)

440 
	}
}

442 
	$HAL_OnOffLed_127
(
U8
 
mu8OnOff
)

445 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led_onoff.h

1 #i‚de‡
__HAL_LED_ONOFF_H__


2 
	#__HAL_LED_ONOFF_H__


	)

6 
HAL_OnOffLed_11
(
U8
 
mu8OnOff
);

7 
HAL_OnOffLed_12
(
U8
 
mu8OnOff
);

8 
HAL_OnOffLed_13
(
U8
 
mu8OnOff
);

9 
HAL_OnOffLed_14
(
U8
 
mu8OnOff
);

10 
HAL_OnOffLed_15
(
U8
 
mu8OnOff
);

11 
HAL_OnOffLed_16
(
U8
 
mu8OnOff
);

12 
HAL_OnOffLed_17
(
U8
 
mu8OnOff
);

16 
HAL_OnOffLed_21
(
U8
 
mu8OnOff
);

17 
HAL_OnOffLed_22
(
U8
 
mu8OnOff
);

18 
HAL_OnOffLed_23
(
U8
 
mu8OnOff
);

19 
HAL_OnOffLed_24
(
U8
 
mu8OnOff
);

20 
HAL_OnOffLed_25
(
U8
 
mu8OnOff
);

21 
HAL_OnOffLed_26
(
U8
 
mu8OnOff
);

22 
HAL_OnOffLed_27
(
U8
 
mu8OnOff
);

26 
HAL_OnOffLed_31
(
U8
 
mu8OnOff
);

27 
HAL_OnOffLed_32
(
U8
 
mu8OnOff
);

28 
HAL_OnOffLed_33
(
U8
 
mu8OnOff
);

29 
HAL_OnOffLed_34
(
U8
 
mu8OnOff
);

30 
HAL_OnOffLed_35
(
U8
 
mu8OnOff
);

31 
HAL_OnOffLed_36
(
U8
 
mu8OnOff
);

32 
HAL_OnOffLed_37
(
U8
 
mu8OnOff
);

36 
HAL_OnOffLed_41
(
U8
 
mu8OnOff
);

37 
HAL_OnOffLed_42
(
U8
 
mu8OnOff
);

38 
HAL_OnOffLed_43
(
U8
 
mu8OnOff
);

39 
HAL_OnOffLed_44
(
U8
 
mu8OnOff
);

40 
HAL_OnOffLed_45
(
U8
 
mu8OnOff
);

41 
HAL_OnOffLed_46
(
U8
 
mu8OnOff
);

42 
HAL_OnOffLed_47
(
U8
 
mu8OnOff
);

46 
HAL_OnOffLed_51
(
U8
 
mu8OnOff
);

47 
HAL_OnOffLed_52
(
U8
 
mu8OnOff
);

48 
HAL_OnOffLed_53
(
U8
 
mu8OnOff
);

49 
HAL_OnOffLed_54
(
U8
 
mu8OnOff
);

50 
HAL_OnOffLed_55
(
U8
 
mu8OnOff
);

51 
HAL_OnOffLed_56
(
U8
 
mu8OnOff
);

52 
HAL_OnOffLed_57
(
U8
 
mu8OnOff
);

57 
HAL_OnOffLed_61
(
U8
 
mu8OnOff
);

58 
HAL_OnOffLed_62
(
U8
 
mu8OnOff
);

59 
HAL_OnOffLed_63
(
U8
 
mu8OnOff
);

60 
HAL_OnOffLed_64
(
U8
 
mu8OnOff
);

61 
HAL_OnOffLed_65
(
U8
 
mu8OnOff
);

62 
HAL_OnOffLed_66
(
U8
 
mu8OnOff
);

63 
HAL_OnOffLed_67
(
U8
 
mu8OnOff
);

67 
HAL_OnOffLed_71
(
U8
 
mu8OnOff
);

68 
HAL_OnOffLed_72
(
U8
 
mu8OnOff
);

69 
HAL_OnOffLed_73
(
U8
 
mu8OnOff
);

70 
HAL_OnOffLed_74
(
U8
 
mu8OnOff
);

71 
HAL_OnOffLed_75
(
U8
 
mu8OnOff
);

72 
HAL_OnOffLed_76
(
U8
 
mu8OnOff
);

73 
HAL_OnOffLed_77
(
U8
 
mu8OnOff
);

77 
HAL_OnOffLed_81
(
U8
 
mu8OnOff
);

78 
HAL_OnOffLed_82
(
U8
 
mu8OnOff
);

79 
HAL_OnOffLed_83
(
U8
 
mu8OnOff
);

80 
HAL_OnOffLed_84
(
U8
 
mu8OnOff
);

81 
HAL_OnOffLed_85
(
U8
 
mu8OnOff
);

82 
HAL_OnOffLed_86
(
U8
 
mu8OnOff
);

83 
HAL_OnOffLed_87
(
U8
 
mu8OnOff
);

87 
HAL_OnOffLed_91
(
U8
 
mu8OnOff
);

88 
HAL_OnOffLed_92
(
U8
 
mu8OnOff
);

89 
HAL_OnOffLed_93
(
U8
 
mu8OnOff
);

90 
HAL_OnOffLed_94
(
U8
 
mu8OnOff
);

91 
HAL_OnOffLed_95
(
U8
 
mu8OnOff
);

92 
HAL_OnOffLed_96
(
U8
 
mu8OnOff
);

93 
HAL_OnOffLed_97
(
U8
 
mu8OnOff
);

97 
HAL_OnOffLed_101
(
U8
 
mu8OnOff
);

98 
HAL_OnOffLed_102
(
U8
 
mu8OnOff
);

99 
HAL_OnOffLed_103
(
U8
 
mu8OnOff
);

100 
HAL_OnOffLed_104
(
U8
 
mu8OnOff
);

101 
HAL_OnOffLed_105
(
U8
 
mu8OnOff
);

102 
HAL_OnOffLed_106
(
U8
 
mu8OnOff
);

103 
HAL_OnOffLed_107
(
U8
 
mu8OnOff
);

107 
HAL_OnOffLed_111
(
U8
 
mu8OnOff
);

108 
HAL_OnOffLed_112
(
U8
 
mu8OnOff
);

109 
HAL_OnOffLed_113
(
U8
 
mu8OnOff
);

110 
HAL_OnOffLed_114
(
U8
 
mu8OnOff
);

111 
HAL_OnOffLed_115
(
U8
 
mu8OnOff
);

112 
HAL_OnOffLed_116
(
U8
 
mu8OnOff
);

113 
HAL_OnOffLed_117
(
U8
 
mu8OnOff
);

117 
HAL_OnOffLed_121
(
U8
 
mu8OnOff
);

118 
HAL_OnOffLed_122
(
U8
 
mu8OnOff
);

119 
HAL_OnOffLed_123
(
U8
 
mu8OnOff
);

120 
HAL_OnOffLed_124
(
U8
 
mu8OnOff
);

121 
HAL_OnOffLed_125
(
U8
 
mu8OnOff
);

122 
HAL_OnOffLed_126
(
U8
 
mu8OnOff
);

123 
HAL_OnOffLed_127
(
U8
 
mu8OnOff
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_serial.c

1 
	#CONFIG_UART_0
 1

	)

2 
	#CONFIG_UART_1
 1

	)

3 
	#CONFIG_UART_2
 0

	)

4 
	#CONFIG_UART_3
 0

	)

7 #i‡
CONFIG_UART_0


8 #¥agm®
öãºu±
 
INTST0
 
r_u¨t0_öãºu±_£nd


9 #¥agm®
öãºu±
 
INTSR0
 
r_u¨t0_öãºu±_ª˚ive


13 #i‡
CONFIG_UART_1


14 #¥agm®
öãºu±
 
INTST1
 
r_u¨t1_öãºu±_£nd


15 #¥agm®
öãºu±
 
INTSR1
 
r_u¨t1_öãºu±_ª˚ive


19 #i‡
CONFIG_UART_2


20 #¥agm®
öãºu±
 
INTST2
 
r_u¨t2_öãºu±_£nd


21 #¥agm®
öãºu±
 
INTSR2
 
r_u¨t2_öãºu±_ª˚ive


25 #i‡
CONFIG_UART_3


26 #¥agm®
öãºu±
 
INTST3
 
r_u¨t3_öãºu±_£nd


27 #¥agm®
öãºu±
 
INTSR3
 
r_u¨t3_öãºu±_ª˚ive


31 
	~"hw.h
"

32 
	~"hÆ_£rül.h
"

33 
	~"timî.h
"

34 
	~<°rög.h
>

37 #i‡
CONFIG_UART_0


38 
	#UART_0_TXD
 
TXD0


	)

39 
	#UART_0_RXD
 
RXD0


	)

42 #i‡
CONFIG_UART_1


43 
	#UART_1_TXD
 
TXD1


	)

44 
	#UART_1_RXD
 
RXD1


	)

47 #i‡
CONFIG_UART_2


48 
	#UART_2_TXD
 
TXD2


	)

49 
	#UART_2_RXD
 
RXD2


	)

52 #i‡
CONFIG_UART_3


53 
	#UART_3_TXD
 
TXD3


	)

54 
	#UART_3_RXD
 
RXD3


	)

58 
	#MAX_UART_0_RX_BUF_SZ
 30

	)

59 
	#MAX_UART_0_TX_BUF_SZ
 30

	)

61 
	#MAX_UART_1_RX_BUF_SZ
 128

	)

62 
	#MAX_UART_1_TX_BUF_SZ
 128

	)

64 
	#MAX_UART_2_RX_BUF_SZ
 128

	)

65 
	#MAX_UART_2_TX_BUF_SZ
 128

	)

67 
	#MAX_UART_3_RX_BUF_SZ
 255

	)

68 
	#MAX_UART_3_TX_BUF_SZ
 255

	)

74 
	#UART_0_RX_TIME_STAMP
 100

	)

75 
	#UART_1_RX_TIME_STAMP
 10

	)

76 
	#UART_2_RX_TIME_STAMP
 10

	)

77 
	#UART_3_RX_TIME_STAMP
 10

	)

80 #i‡
CONFIG_UART_0


81 
U8
 
	gªcv_0_buf
[ 
MAX_UART_0_RX_BUF_SZ
 ];

82 
U8
 
	g£nd_0_buf
[ 
MAX_UART_0_TX_BUF_SZ
 ];

84 
U8
 
	gªcv_0_buf
[ 1 ];

85 
U8
 
	g£nd_0_buf
[ 1 ];

88 #i‡
CONFIG_UART_1


89 
U8
 
	gªcv_1_buf
[ 
MAX_UART_1_RX_BUF_SZ
 ];

90 
U8
 
	g£nd_1_buf
[ 
MAX_UART_1_TX_BUF_SZ
 ];

92 
U8
 
	gªcv_1_buf
[ 1 ];

93 
U8
 
	g£nd_1_buf
[ 1 ];

96 #i‡
CONFIG_UART_2


97 
U8
 
	gªcv_2_buf
[ 
MAX_UART_2_RX_BUF_SZ
 ];

98 
U8
 
	g£nd_2_buf
[ 
MAX_UART_2_TX_BUF_SZ
 ];

100 
U8
 
	gªcv_2_buf
[ 1 ];

101 
U8
 
	g£nd_2_buf
[ 1 ];

104 #i‡
CONFIG_UART_3


105 
U8
 
	gªcv_3_buf
[ 
MAX_UART_3_RX_BUF_SZ
 ];

106 
U8
 
	g£nd_3_buf
[ 
MAX_UART_3_TX_BUF_SZ
 ];

108 
U8
 
	gªcv_3_buf
[ 1 ];

109 
U8
 
	g£nd_3_buf
[ 1 ];

112 
	s_comm_


114 
I16
 
	mªcv_Àn
;

115 
I16
 
	m£nd_Àn
;

116 
I16
 
	mtx_Àn
;

118 vﬁ©ûê
I16
 
	mhód
;

119 vﬁ©ûê
I16
 
	mèû
;

120 } 
	tcomm_t
;

122 
comm_t
 
	gcomm
[ 
MAX_UART_ID
 ];

126 
	$HAL_InôCommId
–
U8
 
u¨t_id
 )

128 if–
u¨t_id
 =
UART_ID_0
 )

130 #i‡
CONFIG_UART_0


131 
	`MEMSET
–(
__FAR
 *)&
ªcv_0_buf
[0], 0, 
MAX_UART_0_RX_BUF_SZ
 );

132 
	`MEMSET
–(
__FAR
 *)&
£nd_0_buf
[0], 0, 
MAX_UART_0_TX_BUF_SZ
 );

135 if–
u¨t_id
 =
UART_ID_1
 )

137 #i‡
CONFIG_UART_1


138 
	`MEMSET
–(
__FAR
 *)&
ªcv_1_buf
[0], 0, 
MAX_UART_1_RX_BUF_SZ
 );

139 
	`MEMSET
–(
__FAR
 *)&
£nd_1_buf
[0], 0, 
MAX_UART_1_TX_BUF_SZ
 );

142 if–
u¨t_id
 =
UART_ID_2
)

144 #i‡
CONFIG_UART_2


145 
	`MEMSET
–(
__FAR
 *)&
ªcv_2_buf
[0], 0, 
MAX_UART_2_RX_BUF_SZ
 );

146 
	`MEMSET
–(
__FAR
 *)&
£nd_2_buf
[0], 0, 
MAX_UART_2_TX_BUF_SZ
 );

149 if–
u¨t_id
 =
UART_ID_3
)

151 #i‡
CONFIG_UART_3


152 
	`MEMSET
–(
__FAR
 *)&
ªcv_3_buf
[0], 0, 
MAX_UART_3_RX_BUF_SZ
 );

153 
	`MEMSET
–(
__FAR
 *)&
£nd_3_buf
[0], 0, 
MAX_UART_3_TX_BUF_SZ
 );

157 
	`MEMSET
–(
__FAR
 *)&
comm
[ 
u¨t_id
 ], 0, –
comm_t
 ) );

158 
	}
}

160 
	$HAL_InôComm
( )

162 #i‡
CONFIG_UART_0


163 
	`HAL_InôCommId
–
UART_ID_0
 );

164 
	`R_UART0_Sèπ
();

167 #i‡
CONFIG_UART_1


168 
	`HAL_InôCommId
–
UART_ID_1
 );

169 
	`R_UART1_Sèπ
();

172 #i‡
CONFIG_UART_2


173 
	`HAL_InôCommId
–
UART_ID_2
 );

174 
	`R_UART2_Sèπ
();

177 #i‡
CONFIG_UART_3


178 
	`HAL_InôCommId
–
UART_ID_3
 );

179 
	`R_UART3_Sèπ
();

182 
	}
}

184 
I16
 
	$HAL_GëMaxRecvBuf„rLígth
(
U8
 
u¨t_id
)

186 if–
u¨t_id
 == 0 )

188  
MAX_UART_0_RX_BUF_SZ
;

190 if–
u¨t_id
 == 1 )

192  
MAX_UART_1_RX_BUF_SZ
;

194 if–
u¨t_id
 == 2 )

196  
MAX_UART_2_RX_BUF_SZ
;

199  
MAX_UART_3_RX_BUF_SZ
;

200 
	}
}

202 
U8
 
	$HAL_IsFuŒRecvBuf„r
–
U8
 
u¨t_id
 )

205 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 >
	`HAL_GëMaxRecvBuf„rLígth
( uart_id ) )

207  
TRUE
;

210  
FALSE
;

212 
I16
 
buf_size
;

214 
buf_size
 = 
	`HAL_GëMaxRecvBuf„rLígth
–
u¨t_id
 );

215 if–((
comm
[
u¨t_id
].
hód
 + 1Ë% 
buf_size
Ë=comm[u¨t_id].
èû
)

217  
TRUE
;

220  
FALSE
;

222 
	}
}

224 
U8
 
	$HAL_IsEm±yRecvBuf„r
–
U8
 
u¨t_id
 )

227 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 > 0 )

229  
FALSE
;

232  
TRUE
;

234 if–
comm
[
u¨t_id
].
hód
 =comm[u¨t_id].
èû
)

236  
TRUE
;

239  
FALSE
;

241 
	}
}

243 
I16
 
	$HAL_GëMaxSídBuf„rLígth
(
U8
 
u¨t_id
)

245 if–
u¨t_id
 == 0 )

247  
MAX_UART_0_TX_BUF_SZ
;

249 if–
u¨t_id
 == 1 )

251  
MAX_UART_1_TX_BUF_SZ
;

253 if–
u¨t_id
 == 2 )

255  
MAX_UART_2_TX_BUF_SZ
;

258  
MAX_UART_3_TX_BUF_SZ
;

259 
	}
}

261 
U8
 
	$HAL_IsFuŒSídBuf„r
–
U8
 
u¨t_id
 )

263 if–
comm
[ 
u¨t_id
 ].
£nd_Àn
 >
	`HAL_GëMaxSídBuf„rLígth
( uart_id ) )

265  
TRUE
;

268  
FALSE
;

269 
	}
}

271 
U8
 
IsCom∂ëeTx
–U8 
u¨t_id
 );

272 
U8
 
	$HAL_IsEm±ySídBuf„r
–
U8
 
u¨t_id
 )

274  
	`IsCom∂ëeTx
–
u¨t_id
 );

275 
	}
}

277 
	$HAL_InôRecvLígth
(
U8
 
u¨t_id
 )

279 
comm
[ 
u¨t_id
 ].
ªcv_Àn
 = 0;

280 
	}
}

282 
I16
 
	$HAL_GëRecvLígth
–
U8
 
u¨t_id
 )

284  
comm
[ 
u¨t_id
 ].
ªcv_Àn
;

285 
	}
}

287 
I16
 
	$HAL_GëSídLígth
–
U8
 
u¨t_id
 )

289  
comm
[ 
u¨t_id
].
£nd_Àn
;

290 
	}
}

293 
	$HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 )

296 
comm_t
 *
p_comm
;

298 
p_comm
 = &
comm
[ 
u¨t_id
 ];

299 if–
u¨t_id
 =
UART_ID_0
 )

301 
ªcv_0_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

303 if–
u¨t_id
 =
UART_ID_1
 )

305 
ªcv_1_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

307 if–
u¨t_id
 =
UART_ID_2
)

309 
ªcv_2_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

313 
ªcv_3_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

315 
p_comm
->
ªcv_Àn
++;

317 
comm_t
 *
p_comm
;

318 
I16
 
buf_Àn
;

320 
p_comm
 = &
comm
[ 
u¨t_id
 ];

321 if–
u¨t_id
 =
UART_ID_0
 )

323 
ªcv_0_buf
[ 
p_comm
->
hód
 ] = 
_byã
;

325 if–
u¨t_id
 =
UART_ID_1
 )

327 
ªcv_1_buf
[ 
p_comm
->
hód
 ] = 
_byã
;

329 if–
u¨t_id
 =
UART_ID_2
)

331 
ªcv_2_buf
[ 
p_comm
->
hód
 ] = 
_byã
;

335 
ªcv_3_buf
[ 
p_comm
->
hód
 ] = 
_byã
;

338 
buf_Àn
 = 
	`HAL_GëMaxSídBuf„rLígth
–
u¨t_id
 );

339 
p_comm
->
hód
 = (p_comm->hód + 1Ë% 
buf_Àn
;

342 
	}
}

344 
U8
 
	$HAL_GëRecvBuf„r
–
U8
 
u¨t_id
 )

347 if–
u¨t_id
 =
UART_ID_0
 )

349  
ªcv_0_buf
[ 
ödex
 ];

351 if–
u¨t_id
 =
UART_ID_1
 )

353  
ªcv_1_buf
[ 
ödex
 ];

355 if–
u¨t_id
 =
UART_ID_2
)

357  
ªcv_2_buf
[ 
ödex
 ];

361  
ªcv_3_buf
[ 
ödex
 ];

365 
comm_t
 *
p_comm
;

366 
I16
 
buf_Àn
;

367 
U8
 
_byã
 = 0;

369 
p_comm
 = &
comm
[ 
u¨t_id
 ];

370 if–
u¨t_id
 =
UART_ID_0
 )

372 
_byã
 = 
ªcv_0_buf
[ 
p_comm
->
èû
 ];

374 if–
u¨t_id
 =
UART_ID_1
 )

376 
_byã
 = 
ªcv_1_buf
[ 
p_comm
->
èû
 ];

378 if–
u¨t_id
 =
UART_ID_2
)

380 
_byã
 = 
ªcv_2_buf
[ 
p_comm
->
èû
 ];

384 
_byã
 = 
ªcv_3_buf
[ 
p_comm
->
èû
 ];

387 
buf_Àn
 = 
	`HAL_GëMaxSídBuf„rLígth
–
u¨t_id
 );

388 
p_comm
->
èû
 = (p_comm->èû + 1Ë% 
buf_Àn
;

391  
_byã
;

393 
	}
}

396 
	$HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 )

398 
comm_t
 *
p_comm
;

400 if–
	`HAL_IsFuŒSídBuf„r
–
u¨t_id
 ) =
FALSE
 )

402 
p_comm
 = &
comm
[ 
u¨t_id
 ];

403 if–
u¨t_id
 =
UART_ID_0
 )

405 
£nd_0_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

407 if–
u¨t_id
 =
UART_ID_1
 )

409 
£nd_1_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

411 if–
u¨t_id
 =
UART_ID_2
)

413 
£nd_2_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

417 
£nd_3_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

419 
p_comm
->
£nd_Àn
++;

421 
	}
}

423 
U8
 
	$HAL_GëSídBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

425 if–
u¨t_id
 =
UART_ID_0
 )

427  
£nd_0_buf
[
ödex
];

429 if–
u¨t_id
 =
UART_ID_1
 )

431  
£nd_1_buf
[
ödex
];

433 if–
u¨t_id
 =
UART_ID_2
)

435  
£nd_2_buf
[
ödex
];

439  
£nd_3_buf
[
ödex
];

441 
	}
}

444 
	$HAL_SídByã
–
U8
 
u¨t_id
 )

446 
U8
 
ch
;

447 
comm_t
 *
p_comm
;

450 
p_comm
 = &
comm
[ 
u¨t_id
 ];

451 if–
u¨t_id
 =
UART_ID_0
 )

453 
ch
 = 
£nd_0_buf
[
p_comm
->
tx_Àn
];

455 if–
u¨t_id
 =
UART_ID_1
 )

457 
ch
 = 
£nd_1_buf
[
p_comm
->
tx_Àn
];

459 if–
u¨t_id
 =
UART_ID_2
)

461 
ch
 = 
£nd_2_buf
[
p_comm
->
tx_Àn
];

463 if–
u¨t_id
 =
UART_ID_3
)

465 
ch
 = 
£nd_3_buf
[
p_comm
->
tx_Àn
];

468 
p_comm
->
tx_Àn
++;

470 if–
u¨t_id
 =
UART_ID_0
 )

472 #i‡
CONFIG_UART_0


473 
UART_0_TXD
 = 
ch
;

476 if–
u¨t_id
 =
UART_ID_1
 )

478 #i‡
CONFIG_UART_1


479 
UART_1_TXD
 = 
ch
;

482 if–
u¨t_id
 =
UART_ID_2
 )

484 #i‡
CONFIG_UART_2


485 
UART_2_TXD
 = 
ch
;

488 if–
u¨t_id
 =
UART_ID_3
 )

490 #i‡
CONFIG_UART_3


491 
UART_3_TXD
 = 
ch
;

494 
	}
}

496 
U8
 
	$IsCom∂ëeTx
–
U8
 
u¨t_id
 )

498 if–
comm
[
u¨t_id
].
tx_Àn
 < comm[ u¨t_id ].
£nd_Àn
 )

500  
FALSE
;

503  
TRUE
;

505 
	}
}

510 #i‡
CONFIG_UART_0


511 
__öãºu±
 
	$r_u¨t0_öãºu±_ª˚ive
()

513 vﬁ©ûê
U8
 
îr_ty≥
;

514 vﬁ©ûê
U8
 
rx_d©a
;

517 
îr_ty≥
 = (
uöt8_t
)(
SSR01
 & 0x0007U);

518 
SIR01
 = (
uöt16_t
)
îr_ty≥
;

520 
rx_d©a
 = 
UART_0_RXD
;

522 if–
îr_ty≥
 == 0 )

524 if–
	`HAL_IsFuŒRecvBuf„r
–
UART_ID_0
 ) =
FALSE
 )

526 
	`HAL_SëRecvBuf„r
–
UART_ID_0
, 
rx_d©a
 );

530 
	`HAL_InôCommId
–
UART_ID_0
 );

533 
	`SèπTimî
–
TIMER_ID_UART_0_RX
, 
UART_0_RX_TIME_STAMP
 );

535 
	}
}

537 
__öãºu±
 
	$r_u¨t0_öãºu±_£nd
()

539 if–
	`IsCom∂ëeTx
–
UART_ID_0
 ) =
FALSE
 )

541 
	`HAL_SídByã
–
UART_ID_0
 );

545 
	`HAL_InôCommId
–
UART_ID_0
 );

547 
	}
}

551 #i‡
CONFIG_UART_1


552 
__öãºu±
 
	$r_u¨t1_öãºu±_ª˚ive
()

554 vﬁ©ûê
U8
 
rx_d©a
;

555 vﬁ©ûê
U8
 
îr_ty≥
;

557 
îr_ty≥
 = (
U8
)(
SSR03
 & 0x0007U);

558 
SIR03
 = (
U16
)
îr_ty≥
;

560 
rx_d©a
 = 
UART_1_RXD
;

562 if–
îr_ty≥
 == 0 )

564 if–
	`HAL_IsFuŒRecvBuf„r
–
UART_ID_1
 ) =
FALSE
 )

566 
	`HAL_SëRecvBuf„r
–
UART_ID_1
, 
rx_d©a
 );

570 
	`HAL_InôCommId
–
UART_ID_1
 );

574 
	`SèπTimî
–
TIMER_ID_COMM_FRONT_RX
, 
UART_1_RX_TIME_STAMP
 );

575 
	}
}

577 
__öãºu±
 
	$r_u¨t1_öãºu±_£nd
()

579 if–
	`IsCom∂ëeTx
–
UART_ID_1
 ) =
FALSE
 )

581 
	`HAL_SídByã
–
UART_ID_1
 );

582 
	`SèπTimî
–
TIMER_ID_UART_1_TX_DONE
, 60 );

586 
	`HAL_InôCommId
–
UART_ID_1
 );

588 
	}
}

592 #i‡
CONFIG_UART_2


593 
U16
 
	gthe_rx_îr_cou¡
 = 0;

594 
__öãºu±
 
	$r_u¨t2_öãºu±_ª˚ive
()

596 vﬁ©ûê
U8
 
îr_ty≥
;

597 vﬁ©ûê
U8
 
rx_d©a
;

599 
îr_ty≥
 = (
uöt8_t
)(
SSR11
 & 0x0007U);

600 
SIR11
 = (
uöt16_t
)
îr_ty≥
;

602 
rx_d©a
 = 
UART_2_RXD
;

604 
	`EI
();

605 if–
îr_ty≥
 == 0 )

607 if–
	`HAL_IsFuŒRecvBuf„r
–
UART_ID_2
 ) =
FALSE
 )

609 
	`HAL_SëRecvBuf„r
–
UART_ID_2
, 
rx_d©a
 );

613 
	`HAL_InôCommId
–
UART_ID_2
 );

616 
	`SèπTimî
–
TIMER_ID_UART_2_RX
, 
UART_2_RX_TIME_STAMP
 );

620 
the_rx_îr_cou¡
++;

622 
	}
}

624 
__öãºu±
 
	$r_u¨t2_öãºu±_£nd
()

626 
	`EI
();

627 if–
	`IsCom∂ëeTx
–
UART_ID_2
 ) =
FALSE
 )

629 
	`HAL_SídByã
–
UART_ID_2
 );

630 
	`SèπTimî
–
TIMER_ID_UART_2_TX_DONE
, 60 );

634 
	`HAL_InôCommId
–
UART_ID_2
 );

637 
	}
}

642 #i‡
CONFIG_UART_3


643 
U16
 
	gthe_i§_îr_cou¡
 = 0;

644 
__öãºu±
 
	$r_u¨t3_öãºu±_ª˚ive
()

646 vﬁ©ûê
U8
 
îr_ty≥
;

647 vﬁ©ûê
U8
 
rx_d©a
;

649 
îr_ty≥
 = (
uöt8_t
)(
SSR13
 & 0x0007U);

650 
SIR13
 = (
uöt16_t
)
îr_ty≥
;

652 
rx_d©a
 = 
UART_3_RXD
;

654 if–
îr_ty≥
 == 0 )

656 if–
	`HAL_IsFuŒRecvBuf„r
–
UART_ID_3
 ) =
FALSE
 )

658 
	`HAL_SëRecvBuf„r
–
UART_ID_3
, 
rx_d©a
 );

662 
	`HAL_InôCommId
–
UART_ID_3
 );

665 
	`SèπTimî
–
TIMER_ID_UART_3_RX
, 
UART_3_RX_TIME_STAMP
 );

669 
the_i§_îr_cou¡
++;

671 
	}
}

674 
__öãºu±
 
	$r_u¨t3_öãºu±_£nd
()

676 if–
	`IsCom∂ëeTx
–
UART_ID_3
 ) =
FALSE
 )

678 
	`HAL_SídByã
–
UART_ID_3
 );

682 
	`HAL_InôCommId
–
UART_ID_3
 );

684 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_serial.h

1 #i‚de‡
__HAL_SERIAL_H__


2 
	#__HAL_SERIAL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#UART_ID_0
 0

	)

8 
	#UART_ID_1
 1

	)

9 
	#UART_ID_2
 2

	)

10 
	#UART_ID_3
 3

	)

11 
	#MAX_UART_ID
 4

	)

14 
HAL_InôCommId
–
U8
 
u¨t_id
 );

15 
HAL_InôComm
( );

17 
U8
 
HAL_IsFuŒRecvBuf„r
–U8 
u¨t_id
 );

18 
U8
 
HAL_IsEm±yRecvBuf„r
–U8 
u¨t_id
 );

19 
U8
 
HAL_IsFuŒSídBuf„r
–U8 
u¨t_id
 );

20 
U8
 
HAL_IsEm±ySídBuf„r
–U8 
u¨t_id
 );

22 
HAL_InôRecvLígth
(
U8
 
u¨t_id
 );

23 
I16
 
HAL_GëRecvLígth
–
U8
 
u¨t_id
 );

24 
I16
 
HAL_GëSídLígth
–
U8
 
u¨t_id
 );

26 
HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 );

28 
U8
 
HAL_GëRecvBuf„r
–U8 
u¨t_id
 );

30 
HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 );

31 
U8
 
HAL_GëSídBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

33 
HAL_SídByã
–
U8
 
u¨t_id
 );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hw.h

1 #i‚de‡
__HW__H__


2 
	#__HW__H__


	)

4 
	~"mcu.h
"

5 
	~"r_cg_cgc.h
"

6 
	~"r_cg_p‹t.h
"

7 
	~"r_cg_wdt.h
"

8 
	~"r_cg_timî.h
"

9 
	~"r_cg_adc.h
"

10 
	~"r_cg_£rül.h
"

11 
	~"r_cg_ma¸odrivî.h
"

15 
	#RESET_WDT
(Ë
	`R_WDT_Re°¨t
()

	)

18 
	#P_LED_11
 
P0
.4

	)

19 
	#P_LED_12
 
P2
.0

	)

20 
	#P_LED_13
 
P2
.1

	)

21 
	#P_LED_14
 
P2
.2

	)

22 
	#P_LED_15
 
P2
.3

	)

23 
	#P_LED_16
 
P2
.4

	)

24 
	#P_LED_17
 
P2
.5

	)

26 
	#P_LED_21
 
P2
.6

	)

27 
	#P_LED_22
 
P2
.7

	)

28 
	#P_LED_23
 
P14
.7

	)

29 
	#P_LED_24
 
P14
.6

	)

30 
	#P_LED_25
 
P1
.0

	)

31 
	#P_LED_26
 
P1
.3

	)

32 
	#P_LED_27
 
P1
.4

	)

34 
	#P_LED_31
 
P1
.5

	)

35 
	#P_LED_32
 
P1
.6

	)

36 
	#P_LED_33
 
P1
.7

	)

37 
	#P_LED_34
 
P5
.5

	)

38 
	#P_LED_35
 
P5
.4

	)

39 
	#P_LED_36
 
P5
.3

	)

40 
	#P_LED_37
 
P5
.2

	)

42 
	#P_LED_41
 
P5
.1

	)

43 
	#P_LED_42
 
P5
.0

	)

44 
	#P_LED_43
 
P3
.0

	)

45 
	#P_LED_44
 
P0
.5

	)

46 
	#P_LED_45
 
P0
.6

	)

47 
	#P_LED_46
 
P7
.0

	)

48 
	#P_LED_47
 
P7
.1

	)

50 
	#P_LED_51
 
P7
.2

	)

51 
	#P_LED_52
 
P7
.3

	)

52 
	#P_LED_53
 
P7
.4

	)

53 
	#P_LED_54
 
P7
.5

	)

54 
	#P_LED_55
 
P7
.6

	)

55 
	#P_LED_56
 
P7
.7

	)

56 
	#P_LED_57
 
P3
.1

	)

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\mcu.h

1 #i‚de‡
__MCU_H__


2 
	#__MCU_H__


	)

4 
	~"r_cg_ma¸odrivî.h
"

6 
	~"¥j_ty≥.h
"

8 
	~"c⁄fig.h
"

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\main.c

1 
	~"mcu.h
"

3 
	~"hw.h
"

4 
	~"timî.h
"

5 
	~"utû.h
"

6 
	~"∑r£r.h
"

8 
	~"¥o˚ss_sys_evít.h
"

11 
	$InôSèπTimîs
( )

13 
	`InôTimî
();

15 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

16 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

17 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

19 
	`SèπTimî
–
TIMER_ID_COMM_WAIT_1
, 100);

20 
	}
}

23 
	$maö
( )

25 
	`Dñay_MS
( 500 );

27 
	`RESET_WDT
();

29 
	`InôSy°em
();

30 
	`InôSèπTimîs
();

31 
	`EI
();

35 
	`RESET_WDT
();

37 
	`Pro˚ssEvítH™dÀr
();

40 
	`RecvPackëH™dÀr
();

41 
	`SídPackëH™dÀr
();

43 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

9 
	tU8
;

10 sig√d 
	tI8
;

11 
	tU16
;

12 sig√d 
	tI16
;

13 
	tU32
;

14 sig√d 
	tI32
;

15 
	tF32
;

16 
	tBOOL_T
;

17 
	tTIME_T
;

19 
	tTEMP_T
;

22 
	#__DEBUG__
 1

	)

24 #i‡
__DEBUG__


25 
	#LOCAL


	)

27 
	#LOCAL
 

	)

30 #ifde‡
NULL


31 #unde‡
NULL


34 
	#NULL
 ((*)0)

	)

36 #ifde‡
TRUE


37 #unde‡
TRUE


40 
	#TRUE
 1

	)

42 #ifde‡
FALSE


43 #unde‡
FALSE


46 
	#FALSE
 0

	)

49 #ifde‡
ON


50 #unde‡
ON


53 
	#ON
 1

	)

55 #ifde‡
OFF


56 #unde‡
OFF


59 
	#OFF
 0

	)

61 
	#HIGH
 1

	)

62 
	#LOW
 0

	)

64 #i‡(
CONFIG_FOTA_LIB
 == 0)

65 
	#__FAR


	)

66 
	#SPRINTF
 
•rötf


	)

67 
	#MEMSET
 
mem£t


	)

68 
	#MEMCPY
 
mem˝y


	)

69 
	#MEMCMP
 
memcmp


	)

70 
	#ATOI
 
©oi


	)

72 
	#__FAR
 
__Ár


	)

73 
	#SPRINTF
 
•rötf_f


	)

74 
	#MEMSET
 
mem£t_f


	)

75 
	#MEMCPY
 
mem˝y_f


	)

76 
	#MEMCMP
 
memcmp_f


	)

77 
	#ATOI
 
©oi_f


	)

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\process_sys_event.c

2 
	~"r_cg_timî.h
"

4 
	~"¥j_ty≥.h
"

5 
	~"timî.h
"

6 
	~"¥o˚ss_sys_evít.h
"

8 
	~"hÆ_£rül.h
"

9 
	~"hÆ_Àd.h
"

10 
	~"hÆ_key.h
"

11 
	~"comm_queue.h
"

14 
	~<°dio.h
>

15 
	~<°rög.h
>

18 (*
	tA˘i⁄_T
)();

19 
	s_sys_evít_


21 
U8
 
timîId
;

22 
A˘i⁄_T
 
pFun
;

23 
A˘i⁄_T
 
pFun_FCT
;

24 
A˘i⁄_T
 
pFun_EOL
;

25 } 
	tSysEvít_T
;

28 
	`Evt_1ms_H™dÀr
( );

29 
	`Evt_10ms_H™dÀr
( );

30 
	`Evt_100ms_H™dÀr
( );

32 c⁄° 
SysEvít_T
 
SysEvítLi°
[] =

35 { 
TIMER_ID_1MS
, 
Evt_1ms_H™dÀr
, 
NULL
, NULL },

36 { 
TIMER_ID_10MS
, 
Evt_10ms_H™dÀr
, 
NULL
, NULL },

37 { 
TIMER_ID_100MS
, 
Evt_100ms_H™dÀr
, 
NULL
, NULL },

38 
	}
};

39 
	#SZ_LIST
 ( –
SysEvítLi°
 ) / –
SysEvít_T
 ) )

	)

41 
	$Pro˚ssEvítH™dÀr
( )

43 
U8
 
i
;

44 
A˘i⁄_T
 
fun
;

46  
i
 = 0; i < 
SZ_LIST
 ; i++ )

48 if–
	`IsExpúedTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 ) =
TIMER_EXPIRE
 )

51 
	`DißbÀTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 );

54 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun
;

57 if–
fun
 !
NULL
 )

59 
	`fun
();

63 
	}
}

65 
	$Evt_1ms_H™dÀr
( )

67 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

69 
	}
}

71 
	$Evt_10ms_H™dÀr
( )

73 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

76 
	}
}

79 
	$Evt_100ms_H™dÀr
()

81 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

82 
	}
}

85 
	$InôSy°em
()

88 
	`HAL_InôComm
();

90 
	`InôCommQueue
();

92 
	`R_TAU0_Ch™√l1_Sèπ
();

93 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\queue.c

6 
	~"queue.h
"

10 
	$InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 )

12 
	`MEMSET
–(
__FAR
 *)
mUd©a
, 0, (
mUd©aSize
 * 
mUqueueNum
) );

14 
xStQueue
->
mUª¨
 = 0;

15 
xStQueue
->
mU‰⁄t
 = 0;

16 
xStQueue
->
mUd©a
 = mUdata;

17 
xStQueue
->
mUd©aSize
 = mUdataSize;

18 
xStQueue
->
mUqueueNum
 = mUqueueNum;

19 
	}
}

21 
U8
 
	$IsQueueEm±y
(
SQueue_T
 *
xStQueue
)

23 if–
xStQueue
->
mUª¨
 =xStQueue->
mU‰⁄t
 )

25  
TRUE
;

28  
FALSE
;

29 
	}
}

31 
U8
 
	$IsQueueFuŒ
(
SQueue_T
 *
xStQueue
)

33 if–
xStQueue
->
mU‰⁄t
 =–xStQueue->
mUª¨
 + 1 ) % xStQueue->
mUqueueNum
 )

35  
TRUE
;

38  
FALSE
;

39 
	}
}

41 
	$EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
)

43 if–
	`IsQueueFuŒ
(
xStQueue
Ë=
TRUE
 )

48 
	`MEMCPY
((
U8
 *)
xStQueue
->
mUd©a
 + (xStQueue->
mUª¨
 * xStQueue->
mUd©aSize
), 
xUd©a
, xStQueue->mUdataSize);

49 
xStQueue
->
mUª¨
 = (xStQueue->mUª¨ + 1Ë% xStQueue->
mUqueueNum
;

50 
	}
}

53 
	$EnQueueFr⁄t
(
SQueue_T
 *
xStQueue
, *
xUd©a
)

56 i‡(
	`IsQueueFuŒ
(
xStQueue
Ë=
TRUE
 )

62 
xStQueue
->
mU‰⁄t
 = (xStQueue->mU‰⁄à=0Ë? xStQueue->
mUqueueNum
 - 1 : xStQueue->mUfront - 1;

65 
	`mem˝y
((
U8
 *)
xStQueue
->
mUd©a
 + (xStQueue->
mU‰⁄t
 * xStQueue->
mUd©aSize
), 
xUd©a
, xStQueue->mUdataSize);

66 
	}
}

69 
U8
 
	$DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
)

71 if–
	`IsQueueEm±y
(
xStQueue
Ë=
TRUE
 )

73  
FALSE
;

76 
	`MEMCPY
(
xU±rD©a
, (
U8
 *)
xStQueue
->
mUd©a
 + (xStQueue->
mU‰⁄t
 * xStQueue->
mUd©aSize
), xStQueue->mUdataSize);

77 
xStQueue
->
mU‰⁄t
 = (xStQueue->mU‰⁄à+ 1Ë% xStQueue->
mUqueueNum
;

79  
TRUE
;

80 
	}
}

82 
U8
 
	$PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
)

84 if–
	`IsQueueEm±y
(
xStQueue
Ë=
TRUE
 )

86  
FALSE
;

89 
	`MEMCPY
(
xU±rD©a
, (
U8
 *)
xStQueue
->
mUd©a
 + ((xStQueue->
mU‰⁄t
 + 1Ë% xStQueue->
mUqueueNum
 * xStQueue->
mUd©aSize
), xStQueue->mUdataSize);

91  
TRUE
;

92 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\queue.h

6 #i‚de‡
__QUEUE_H__


7 
	#__QUEUE_H__


	)

9 
	~"¥j_ty≥.h
"

12 
	s_queue_


14 **
	mmUd©a
;

15 
U16
 
	mmUqueueNum
;

16 
U8
 
	mmUd©aSize
;

18 
U16
 
	mmUª¨
;

19 
U16
 
	mmU‰⁄t
;

20 } 
	tSQueue_T
;

22 
InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 );

24 
U8
 
IsQueueEm±y
(
SQueue_T
 *
xStQueue
);

25 
U8
 
IsQueueFuŒ
(
SQueue_T
 *
xStQueue
);

27 
EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

28 
EnQueueFr⁄t
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

29 
U8
 
DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

30 
U8
 
PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer.c

1 #¥agm®
öãºu±
 
INTTM00
 
Ba£TimîI¡îru±


3 
	~"hw.h
"

4 
	~"timî.h
"

6 
	~<°rög.h
>

10 
	#INTS_BYTE
(Ë
_öts_byã


	)

11 
	#MASK_BASE_TIMER
 
TMMK00


	)

12 
	#DISABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 1; }0)

	)

13 
	#ENABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 0; }0)

	)

15 
	#ENTER_CRITICAL_SECTION_TIMER
() \

17 
_öts_byã
 = 
MASK_BASE_TIMER
; \

18 
	`DISABLE_INT_MASK_BASE_TIMER
(); \

19 }0)

	)

21 
	#EXIT_CRITICAL_SECTION_TIMER
() \

23 
MASK_BASE_TIMER
 = 
_öts_byã
; \

24 } 0)

	)

27 
	#HZ
 (1UL)

	)

29 
	s_timî_


31 
U8
 
	míabÀ
;

32 
U8
 
	mty≥
;

33 
U32
 
	mtime_out
;

34 } 
	ttimî_öfo_t
;

36 
LOCAL
 
timî_öfo_t
 
	gtimî_öfo
[ 
MAX_TIMER_ID_NUM
 ];

38 (*
pFunU£rISR
)(Ë
NULL
 ;

41 
	$InôTimî
( )

43 
	`mem£t
–
timî_öfo
, 0, (Åimer_info) );

45 
	`R_TAU0_Ch™√l0_Sèπ
();

46 
	}
}

49 
	$SèπTimî
–
U8
 
id
, 
U32
 
time_out
 )

51 
	`INTS_BYTE
();

53 
	`ENTER_CRITICAL_SECTION_TIMER
();

55 
timî_öfo
[ 
id
 ].
íabÀ
 = 1;

56 
timî_öfo
[ 
id
 ].
time_out
 =Åime_ouà/ 
HZ
;

57 #i‡(
HZ
 != 1UL)

58 if–(
time_out
 % 
HZ
Ë>(
U32
)5 )

60 
timî_öfo
[ 
id
 ].
time_out
++;

64 
	`EXIT_CRITICAL_SECTION_TIMER
();

66 
	}
}

68 
	$DißbÀTimî
–
U8
 
id
 )

70 
timî_öfo
[ 
id
 ].
íabÀ
 = 0;

71 
timî_öfo
[ 
id
 ].
time_out
 = (
U32
)-1;

72 
	}
}

74 
	$St›Timî
–
U8
 
id
 )

76 
	`DißbÀTimî
–
id
 );

77 
	}
}

80 
U8
 
	$IsExpúedTimî
–
U8
 
id
 )

82 
U32
 
time_out
;

83 
	`INTS_BYTE
();

86 
	`ENTER_CRITICAL_SECTION_TIMER
();

87 
time_out
 = 
timî_öfo
[ 
id
 ].time_out;

88 
	`EXIT_CRITICAL_SECTION_TIMER
();

90 if–
timî_öfo
[ 
id
 ].
íabÀ
 == 0 )

92  
TIMER_DISABLE
;

95 if–
time_out
 > 0 )

97  
TIMER_NOT_EXPIRE
;

100  
TIMER_EXPIRE
;

101 
	}
}

104 
	$Upd©eTimî
( )

106 
U8
 
i
;

108  
i
 = 0 ; i < 
MAX_TIMER_ID_NUM
 ; i++ )

110 if–
timî_öfo
[ 
i
 ].
íabÀ
 == 0 )

115 if–
timî_öfo
[ 
i
 ].
time_out
 > 0 )

117 
timî_öfo
[ 
i
 ].
time_out
--;

120 
	}
}

124 
Regi°îTimîISR
–(*
pU£rISR
)() )

126 
pFunU£rISR
 = 
pU£rISR
;

127 
	}
}

131 
	$Ba£TimîI¡îru±
()

133 
	`Upd©eTimî
();

136 if–
pFunU£rISR
 !
NULL
 )

138 
	`pFunU£rISR
();

140 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

4 
	~"timî_id.h
"

6 
	#DELAY_MS
(
x
)

	)

7 
	#SEC
–
x
 ) ( ( x ) * 1000UL )

	)

9 
InôTimî
( );

11 
SèπTimî
–
U8
 
id
, 
U32
 
time_out
 );

13 
DißbÀTimî
–
U8
 
id
 );

15 
St›Timî
–
U8
 
id
 );

17 
	#TIMER_EXPIRE
 0

	)

18 
	#TIMER_NOT_EXPIRE
 1

	)

19 
	#TIMER_DISABLE
 2

	)

20 
U8
 
IsExpúedTimî
–U8 
id
 );

24 
Regi°îTimîISR
–(*
pU£rISR
)() );

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer_id.h

1 #i‚de‡
__TIMER_ID_H__


2 
	#__TIMER_ID_H__


	)

7 
	mTIMER_ID_COMM_MAIN_RX
,

8 
	mTIMER_ID_COMM_MAIN_TX
,

10 
	mTIMER_ID_COMM_KEY_RX
,

11 
	mTIMER_ID_COMM_KEY_TX
,

14 
	mTIMER_ID_UART_0_TX_DONE
,

15 
	mTIMER_ID_UART_1_TX_DONE
,

16 
	mTIMER_ID_UART_2_TX_DONE
,

17 
	mTIMER_ID_UART_3_TX_DONE
,

18 
	mTIMER_ID_UART_0_RX
,

19 
	mTIMER_ID_UART_1_RX
,

20 
	mTIMER_ID_UART_2_RX
,

21 
	mTIMER_ID_UART_3_RX
,

22 
	mTIMER_ID_COMM_WAIT_1
,

23 
	mTIMER_ID_COMM_WAIT_2
,

24 
	mTIMER_ID_COMM_WAIT_3
,

25 
	mTIMER_ID_COMM_WAIT_4
,

27 
	mTIMER_ID_COMM_TX_COMPLETE_1
,

28 
	mTIMER_ID_1MS
,

29 
	mTIMER_ID_10MS
,

30 
	mTIMER_ID_100MS
,

32 
	mMAX_TIMER_ID_NUM


	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\util.c

1 
	~"mcu.h
"

2 
	~"utû.h
"

3 
	~"hw.h
"

5 
I16
 
	$GëMö
–
I16
 
x
, I16 
y
 )

7 if–
x
 > 
y
 )

9  
y
;

12  
x
;

13 
	}
}

15 
I16
 
	$GëMax
–
I16
 
x
, I16 
y
 )

17 if–
x
 > 
y
 )

19  
x
;

22  
y
;

23 
	}
}

26 
U8
 
	$Hex2Dec
(
U8
 
mu8Hex
)

28 
U8
 
mu8Dec
;

30 
mu8Dec
 = (
mu8Hex
 & 0x0F);

31 
mu8Dec
 +((
mu8Hex
 & 0xF0) >> 4) * 10;;

33  
mu8Dec
;

34 
	}
}

37 
U8
 
	$Dec2Hex
(
U8
 
mu8Dec
)

39 
U8
 
mu8Hex
;

41 
mu8Hex
 = 
mu8Dec
 % 10;

42 
mu8Hex
 +(
mu8Dec
 / 10) * 16;

44  
mu8Hex
;

45 
	}
}

47 
U8
 
	$C⁄vAsc2Byã
(
U8
 
mu8Uµî
, U8 
mu8Lowî
 )

49 
U8
 
mu8Temp
 = 0;

50 
U8
 
mu8VÆ
 = 0;

54 if–
mu8Uµî
 > '9' )

56 
mu8Temp
 = 
mu8Uµî
 - '7';

60 
mu8Temp
 = 
mu8Uµî
 - '0';

62 
mu8VÆ
 = 
mu8Temp
 * 16;

65 if–
mu8Lowî
 > '9' )

67 
mu8Temp
 = 
mu8Lowî
 - '7';

71 
mu8Temp
 = 
mu8Lowî
 - '0';

73 
mu8VÆ
 +
mu8Temp
;

76  
mu8VÆ
;

77 
	}
}

79 
	$Dñay_US
–
U8
 
us
 )

81  
us
-- )

83 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

84 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

85 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

87 
	}
}

89 
U16
 
	$ByãOrdîC⁄v
–
U16
 
_§c
 )

91 
U16
 
h_to_l
 = 
_§c
 >> 8;

92 
U16
 
l_to_h
 = ( 
_§c
 & 0x00FF ) << 8;

94  ( 
l_to_h
 | 
h_to_l
 );

95 
	}
}

97 
	$Dñay_MS
–
U16
 
ms
 )

99 
U16
 
i
;

100 
U8
 
j
;

102  
i
 = 0 ; i < 
ms
 ; i++ )

104  
j
 = 0; j < 4 ; j++ )

106 
	`Dñay_US
( 250 );

107 
	`R_WDT_Re°¨t
();

110 
	}
}

112 
	$Re£t
()

118 
	}
}

120 
U8
 
	$CheckLimôVÆue
(
U8
 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
)

122 if–
mu8VÆ
 < 
mu8Mö
 || mu8VÆ > 
mu8Max
 )

124  
mu8Inô
;

127  
mu8VÆ
;

128 
	}
}

	@D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
	#DOWN_COUNT
(
vÆ
) \

30 if–
vÆ
 != 0 ) { val--; } \

31 }0)

	)

33 
	#DOWN_COUNT_RELOAD
(
vÆ
,
ªlﬂd
) \

35 if–
vÆ
 != 0 ){ val--;}\

36 { 
vÆ
=
ªlﬂd
;} \

37 }0)

	)

39 
I16
 
GëMö
–I16 
x
, I16 );

40 
I16
 
GëMax
–I16 
x
, I16 
y
 );

42 
U8
 
Hex2Dec
(U8 
mu8Hex
);

43 
U8
 
Dec2Hex
(U8 
mu8Dec
);

45 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

46 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

48 
Dñay_US
–
U8
 
us
 );

49 
Dñay_MS
–
U16
 
ms
 );

51 
Re£t
();

56 
U8
 
CheckLimôVÆue
(U8 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
);

	@config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

5 
	#CONFIG_DIMMING
 1

	)

7 
	#CONFIG_VOICE_NUVOTON
 1

8 

	)

9 
	#CONFIG_FOTA_LIB
 0

	)

	@prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

9 
	tU8
;

10 sig√d 
	tI8
;

11 
	tU16
;

12 sig√d 
	tI16
;

13 
	tU32
;

14 sig√d 
	tI32
;

15 
	tF32
;

16 
	tBOOL_T
;

17 
	tTIME_T
;

19 
	tTEMP_T
;

22 
	#__DEBUG__
 1

	)

24 #i‡
__DEBUG__


25 
	#LOCAL


	)

27 
	#LOCAL
 

	)

30 #ifde‡
NULL


31 #unde‡
NULL


34 
	#NULL
 ((*)0)

	)

36 #ifde‡
TRUE


37 #unde‡
TRUE


40 
	#TRUE
 1

	)

42 #ifde‡
FALSE


43 #unde‡
FALSE


46 
	#FALSE
 0

	)

49 #ifde‡
ON


50 #unde‡
ON


53 
	#ON
 1

	)

55 #ifde‡
OFF


56 #unde‡
OFF


59 
	#OFF
 0

	)

61 
	#HIGH
 1

	)

62 
	#LOW
 0

	)

64 #i‡(
CONFIG_FOTA_LIB
 == 0)

65 
	#__FAR


	)

66 
	#SPRINTF
 
•rötf


	)

67 
	#MEMSET
 
mem£t


	)

68 
	#MEMCPY
 
mem˝y


	)

69 
	#MEMCMP
 
memcmp


	)

70 
	#ATOI
 
©oi


	)

72 
	#__FAR
 
__Ár


	)

73 
	#SPRINTF
 
•rötf_f


	)

74 
	#MEMSET
 
mem£t_f


	)

75 
	#MEMCPY
 
mem˝y_f


	)

76 
	#MEMCMP
 
memcmp_f


	)

77 
	#ATOI
 
©oi_f


	)

	@process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@queue.h

6 #i‚de‡
__QUEUE_H__


7 
	#__QUEUE_H__


	)

9 
	~"¥j_ty≥.h
"

12 
	s_queue_


14 **
	mmUd©a
;

15 
U16
 
	mmUqueueNum
;

16 
U8
 
	mmUd©aSize
;

18 
U16
 
	mmUª¨
;

19 
U16
 
	mmU‰⁄t
;

20 } 
	tSQueue_T
;

22 
InôQueue
(
SQueue_T
 *
xStQueue
, *
mUd©a
, 
U8
 
mUd©aSize
, U8 
mUqueueNum
 );

24 
U8
 
IsQueueEm±y
(
SQueue_T
 *
xStQueue
);

25 
U8
 
IsQueueFuŒ
(
SQueue_T
 *
xStQueue
);

27 
EnQueue
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

28 
EnQueueFr⁄t
(
SQueue_T
 *
xStQueue
, *
xUd©a
);

29 
U8
 
DeQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

30 
U8
 
PìkQueue
(
SQueue_T
 *
xStQueue
, *
xU±rD©a
);

	@util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
	#DOWN_COUNT
(
vÆ
) \

30 if–
vÆ
 != 0 ) { val--; } \

31 }0)

	)

33 
	#DOWN_COUNT_RELOAD
(
vÆ
,
ªlﬂd
) \

35 if–
vÆ
 != 0 ){ val--;}\

36 { 
vÆ
=
ªlﬂd
;} \

37 }0)

	)

39 
I16
 
GëMö
–I16 
x
, I16 );

40 
I16
 
GëMax
–I16 
x
, I16 
y
 );

42 
U8
 
Hex2Dec
(U8 
mu8Hex
);

43 
U8
 
Dec2Hex
(U8 
mu8Dec
);

45 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

46 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

48 
Dñay_US
–
U8
 
us
 );

49 
Dñay_MS
–
U16
 
ms
 );

51 
Re£t
();

56 
U8
 
CheckLimôVÆue
(U8 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
);

	@
1
.
0
39
2710
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm_queue.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\comm_queue.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\crc16.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\crc16.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_key.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_key.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_main.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\comm\parser_main.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\config.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_key.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_key.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led_onoff.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_led_onoff.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_serial.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hal_serial.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\hw.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\hal\mcu.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\main.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\prj_type.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\process_sys_event.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\process_sys_event.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\queue.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\queue.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\timer\timer_id.h
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\util.c
D:\Work\project_svn\2024\TECH_TOUCH_SLIDER\Program\Front\Source\util.h
config.h
prj_type.h
process_sys_event.h
queue.h
util.h
